#macro current_frame_active (current_frame < floor(current_frame) + current_time_scale)

#define init
    global.sprPopoLaserMid = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAAIAAAAICAYAAADTLS5CAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gURFBgBWS4MwAAAACBJREFUCNdjZPj//z8DAwMDEwMUsPyHMuAimAwWRnQRAAY0BBH0mJ2jAAAAAElFTkSuQmCC", 1, 2, 4);
    global.sprPopoLaserBgn = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAADAAAAAMCAYAAAAkuj5RAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gURFBkaylD0bQAAAJ9JREFUSMfVVUEOwCAIs/7/z91FN3Sgwjw4Eg8jjWlLhyn9vNB8kdRRgNZmwWOCq1gASCRHuLgAi/yA3C1gI6GYAEGelkIPSY/LHyeSm7u0+7W+Mi3KniTkwQ5iujQBjhOEXa7trBwLXkt+5tJ5AuoUDviJs71Tn561fmhtr67HUqYRzty/BQgH0Z0dEfNiPRONP2QVWx+nVeIHLYAj6gJjU2r4uiM3LwAAAABJRU5ErkJggg==", 4, 6, 6);
    global.sprPopoLaserEnd = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gURFBoW6MvrhQAAALRJREFUWMPtV9EOhCAMa4n//8u9B+UyEyOOwQE5m/hmgY6uU+DFBSRB0s94O1Wq5GZ+DS/druRZ9ODJy2sEkmxTgKynpghBAbUiQvuW/ERzwkct8PTdSZBKfnI5gaQVP6KnYw642PTkhIVu1u0AmRCzz8wJ3sIpaYZbiIRfNDi7tIAkfQ/mDMYTd9gUiEyC1pNBUs/sYVfxC4D/LB4AtmJVHOJz7bj0h5A9vFNISPWA/4cXAD7OpoLtN0xXWQAAAABJRU5ErkJggg==", 4, 8, 8);

    global.sprIDPDWeaponChest = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAHAAAAAQCAYAAADOFPsRAAACFklEQVRYhe1ZPUjDQBh9JwUzduuaE0EEEQTp4Ng61e6OlY51sZtjxm7t0o7Fju41kzo6iCCIIIJ4Xbs5xukcNGmvTWzup2lT+paQhPe9d/ny3X2XAGukGuTvyHX4nHMlPiHEiL4uX8b/yLKcfpiE6vj9WOQvAG9e3eLSacKipVgBPOai4dRRPzsONSYDQgh09AFo8VX8W7SspP91X5u6pjp+j/UBABkAODrYgkVL2LTjBfA5pqCrn7R/j/Xx+MKk9XPVAYZdO9SLrP/HF4b8PsVGbMYaAvL7VImXqw6MeSCEpD+BulP4IrSzhY4xD6lPIKBeDYvE+BSsg5VIIBDeIMTBRFeZKExoZwDg4fkTHnOFRZSdim81vR69MR5z8fC8oy3uw5T+sGsHa4wMv9W7w0WluDD/OnwCgG/aJwCAhlMHAFw6TbyWboQAe+6JcB8Avgc3RrYRpvUtWo7NBxDo+615kv7H9VX4KzOFjkMlEcBvJaYNwUbe6b0LN552z4Xzw7e2cO5Udoxu5Oeh/3E+WmOi+ACm9GXWU13/Yfoy/EyUsUlC0jChv93mSi17ttBRbop86PqPyw8S6DFXUsJME8M5R6t3p6xPCPm3Cr/ua7BoOZLvY1Lfoq7UVKz7/FT5QQLjfoebBy4qxakpRAazukiP9WdWYtj4ZSpR9/mp8pfib4TPV9gXCf5n2QiJH2v8UXGX4W/KD3iBb2vzd8wrAAAAAElFTkSuQmCC", 7, 8, 8);
    global.sprIDPDWeaponChestOpen = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAdElEQVQ4jWNgoBAwQun/5OpnZGBg+M+tl0mW7q+XpjOwwDg/H+4mSTO7vCsDAwMDAxNZViMBig2Ae+HPxzskaWRnGCxeoF4YkJsWWBgYGBgsZT8wHLnyliSNNjrCDHsuUTUaP9wjUaswqgEsAkpkuYDi3AgAJOgVxQxneLQAAAAASUVORK5CYII=", 1, 8, 8);
    global.sprIDPDHealthChest = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAHAAAAAQCAYAAADOFPsRAAACDklEQVRYhe1ZMU/CQBh9R0joBhtrO7kYJ+MOm8h/MGFEfwSrmwMSJxL+gkESHWBzcDFxY7FMJiwGFlOnc6AHpb0Ld/eViuhbGsq97727149rKfCPXw0WHjmFzzm34jPGUtGn8k38ryyb6cskbOcvarGwAC9WbhD4AzheTauAGDsfXUiNmYAxBoo+ABLfxr/j1a30Z8Nm4pzt/AO/DwDIA0DBrSHwByi46wXmo8vQYDtRID6WAqp+1v4Dv49yY2KsX25MMO26iXo2/kWtnPUs/jhkQeggGjwVjLFFB8Yhko9/jl8J24KJPuc8sShZ+eecx/dELX3Hqy9/AmUw8b8XHWjbDT+JtDpR2oEi6aw7j6If3ZdM+Iwx8o1YHLr6su414QN70oECu7AvZY1lgB+394kvi5W2NH3ZWCrS0o+GaML/fJB3gy6o/m35eQD4mgzwfrc4AkDr/ACt3niNFD0XHZsG0tafdl2Uqh1tvtA/vupIn9W27Z/CX+6Bh4MzON6K8Hh9ulbg6eUNqrFpIG392bCJ51dfmy/Olap2IVL92/KlNzGt3hiIXQFZIi39kyMv0Yk6sA1RgOrfhJ8DFk/2prDhyMA5J+mr7uQEVEFENWX6JsFT14/CzwHQ/g8uChuO2oz6oVZHf9Niy0KM8lVz0Q2Run4U/k68jRD8Td2k0kfof5MNSX2t+avq7sLblG8dbq/OSrsfEAAAAABJRU5ErkJggg==", 7, 8, 8);
    global.sprIDPDHealthChestOpen = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAeElEQVQ4jWNgoBAwQun/5OpnZGBg+M+tl0mW7q+XpjOwwDg/H+4mSTO7vCsDAwMDAxNZViMBig2Ae+HPxzskaWRnGCxeoF4YkJsWWBgYGBj+frzL8OfDPQYWASWiNCGrpU4Y/Plwj2SNMD1MDAwMRDsdGcD0UJwbAUAvG6UXyOqnAAAAAElFTkSuQmCC", 1, 8, 8);
    global.sprIDPDBigChest = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAKgAAAAYCAYAAABugbbBAAADuklEQVRoge1aP0gbURz+XgkkdKlboVNOh+KiFEGhQ0uNWCqWbjom1K1YyG3t5iadFFrdLDrWrVQjLVqxg6Agoos4NJe14FCXkkzX4fIu7/6/e3cvucD7IJB7f77fl+9+97v37gIoKCgoKCgoKCgoKCgo2CAB7WbKfE5y0xTiJ4Rw8aMH+jml9aU/VE4v/KcNDsKTizperlpdt4eLuPfsEwDAmNcAANoXw9P3rWpiYnTQl1/U8CgwhmVC/7/vRIif1Z/UKlcOpebPn89Fv1hS/GcvCALAPLmo2+TH53UsHw3Zx61GDfniDIx5DVcbVtvwghWE9lG8f/objx91TsLE6GBiw6NACEGW9J/NkVj8ADz6q+VSrJhunF4aofyi/gQkqRT/x0esZM4BwHR1zx7YalwjX+wEAGCTDy9Yx1cbgLGg4cGHNce4pa1r5NviWo2a1zlJyJL+sW0TZ3MkFr9b//LRkG8y8GJ8RMPA5Hogv6g/A5Pr+PvzjSeeHP+tWHcA4Mfqi1gG8EAGZzdjJeEc246uuiy/X6z7rxvC8QE4EilNf/x0yfKfEGIl6HR1L3Qwzf6rDef3MERxpoks6r/7PDxJWf6gWEmTlC5P0vbHrUum/1wVtHSzZhNT8tLNWuicLFXQJPr5N65e+N0O3fzu726wt2pRyPCHrnNl8VNOTwVdKj/0DM4XZ+wglJxd3PrN7VUFlaE/SZKwa8kg/ij9SSupLH/oxSvTf88u/smrtwBgb/9bjVrgFcIujm8PFwEAv75+tPt7sYtPWz/Q2QXTnaUICtpsJH+UfpH43fRHBr+9i2dR0GbsXWbTqAHwD2D1deY0jVpXKyeFbP1sW9htOwxNYwcFbTaSn2rx0396aQglaTf9SZs/BzhL67sl7+OV4/O6py0ILJd+yD1NGKZpYnXrwD6WoZ9tK2izaBo7AkqtJGW1+vFH6Rd5Tir7/Mrkz/FO1CtTjuOVzX3uoLJRLZccJ94Ptv72kmMlYnwYgp4H8oBHqx90mpSEQK8kf+Pk4Zd8fnXXRcXr/x3uCKbp/GQMkVUlZd1JNk5Cb4oIsT5tiCR5PyIHgOiVKceZK2idHVarsQtAd5gDANjcR6ux6xmrV3bZUYQQIv1dPOWvlkvQK1P++juTYukHgCB/klZSvRLO76ufWrl1gLa3gTGoP7H4GST1Jw1+rn8zBZV7920BGf23Ttr63fy8P0eW/qT/NpLtTxJ+noBR7os/yUZ0ssYwPTBERH8q/EE/o1/09zG/goKCgoKCQv/hP083U81I1IAVAAAAAElFTkSuQmCC", 7, 12, 12);
    global.sprIDPDBigChestOpen = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAA+klEQVRIiWNgGAXDHjDiEP9PLfNgAigGcutlkmX610vTMcxnZGBg+M8h78bAzK8MF/378S5ZFqCb8ePhLgYWmAS5hiIDZDNglrFgU/jj4S6yLOCQd8Mq/p9bL/M/AyQeqIZhZjKR5VQSAM0tYGFggEQOctLEktyIAshmwCKcBV0AXSEpAFtKZGFgYGCw0RGGCxw4chpFwZ8P9xgcbEyxGnjgyGkGFgElnGr3PMSRTLGBPVuXo/BdvCOJ0keXSGbcs3U5SlmE4u2PdxgYGLAH0Z+PdzDU7tl6B1kJIyyIUErBHw93YZSmuIIELdfjLE3xAUJFNzFmjALcAAAfVWgZ+3HR8gAAAABJRU5ErkJggg==", 1, 12, 12);

    global.sprIDPDTurretSpwn = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAPAAAAAYCAYAAADEQnB9AAAEaklEQVR4nO2bT07bQBTGv1QNAiFhvAlpFlFQJSa7ZpUT0A25AbkB3KU7cgCkcAPYwAlYwQ4jVUFZUMjGTSXUiizchT0T/4nj+WODgfdbERh/fqD53sx7MwAEQbxZKq8dAPHu8TJ+TnPQAPrjEUXhAUBjawfu9AEAUDuYAgAmAwsAYFt13D/e8vG6c7HoBFFqfTIwUQRep70L5+4SQNK48c+s1cXVzQWgNh+LThAJ/ZVTX/+5V4y+TvxkYKIIvMbWDqp9B8B8QsbhE3Y2ZHyiys7HohNERD9u3PhnU32T+MnARN54nfYuJu44dWVZtNLU7KaKCQpPEI2tHTyd+PrcqHG4kdf39fTziJ8MTORd4wkDAxAmBpLGBXzzAlAxcNEJIqGftQKb6pvE/znjZcT7JVKDsVYX7t45AMA++w7n7pLXYNzgysm+ZjfF1+70IdW43Oyq2FY9orssQZjopxk3L32T+MnAH5NIDcbNKybOwRTs7DsACHNf3Vx4kDNx5ermwmts7Yhv1OwmanYTza9fAADjn78AIGJcjSZW4Qkirr/IuHnq68RPBv6gTNyx1OrBWl3VCeoB8Ou7IAlkUe07wI8KfzbLxEUniDel/0nihcT7wuu0dwFE69M0+CodPJNVLwMA1lY3fP29c9GoWUS174htO39GgnmCkCQ0ViZ+D4BoYMkQGvvi+rQCf2B4DeZOH/wtc1CD8RqYj9HRnQwsUdNxk7p8AIuOnwws2FYdf//9kdKPJAggdaWv9h3xzrXVDWX90dE5Nk+X6496+vp5xE8G/sCEazDn7hIIarAJzGs8bmJg3pyJE+6y6mjHEwQ30+Zp8j0qCcK26nB7lmhajY4C/dg4/p7nnp4+QvH/7kX1w7/DMn0ycPnJ+5jnxZpMvH6eDVliu25bdXE8UrYEwZ9xexYmAFZ6S/QHZrsUwCz+shlY+8hCUjdOHu8p6q5s4qoda3UBILK91TjmKbzJdP94q5wgFC9CAFiQIAb+9/kOwiRBhPWxvzgBreekPxsyPA+i+jPJ+Mtm4LeEVEMHeklJHPO404dEBg4beW11Q/WYp+gacn7LSCFBNPzbRmVIEG9Kn7rQesiaV/sZfsyzbPvEWl2dY57I9g3wjezuneOaHeOaHYvPIpaghlRhNmTSXejZkKWOWUDkGqIM1b6DwDBSXeLwNUoZnk5eT59WYHV0zBt+VvmqXZp5wlvpTntXaRUuuoYE/G72xB3DDcwW70LPhszfImpoz4YMbt+R2kEoJggA/v3m0Ykj1YVe39fTl41/mT4ZuMSEj3mAedeYG5eP0aXIJlNEK5igiS2ikWoyQcS70CYJAgC2D339UbBaxrvQ6/sM22f6+uH4F3WhZeInA6tTQWgVlmgyxZ/N1Odd4vhVu0XG5QZTuQn00jWeDCb6PEF8c9IThIn+9mF2AjKN3z7T0ycD6yFMnNVkij0jrX//eOvdP96CGznNYIFxjfSXQfrl1i/bvxPSMRLpk36++gRBEARB5M5/7tXhlmXQtYwAAAAASUVORK5CYII=", 10, 12, 12);
    global.sprIDPDTurretIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAYAAAAAYCAYAAADzhSolAAAEZ0lEQVR4nO3cz07bSBwH8C/VsoqFFNeX4KZSomolQm/ZV0BwKW8Ab1Bu9Dl63L5BeYNyaekzcOsaaYWK1DTkYlIJpWoP04M7ZuKd8Z/Ebmbo93uKhfOx+flnG2eGAAzDMAzDMAzD/D5ZK7GOqMGgT58+ffqW+Q8KYNHd3ILXasNrtdE/Fugfi3S5u7mVrldtn1fjQwhA0Df5rh9f133X+4f9me83XR//TMA/q8cXw+1d4bXawmu1Rf9YiP6xMC4Pt3erbuRe+RBCQNA3+a4f36yXrRf9+3V8mz6/6q6/fyaEfyaMy3m+6fFAdDe3sH4YAQAmr3ztSp3nUwDA99cDjK4v8jz6C/ijceJ7Hn2dX1T/2SzxuyF9XWzvf9f9ov5f9vjeniT+t329/+ebxN84MPu6DYrh9i4m8RXi6RjAXSFkobLLgR+iE/Rw/u+7Mr8Efct82YiyUV3zs152e675rvUP/Xw/2y9194+80MsbQXY5z/8jb0uBHyKejo2FkessGvp2+KYLc92+bPyJ10x9sidW3X5an6Z9x/qHfr5vuvDX5Zsu/GX83BtAJ+ilr9VCqXAn6GESX1Xcdfq/o69rfJd81+tPf7V+0/2pu/AX+bljAPLNckO9vx4BAK7++wwA6c8m8dVCn2HRp0+fPv3V+bppoAJAOsBQJsq6ZUay6VvgywEqV/0q9VH2hb4mNvan6/6nCv3/aYHjW+X8yusf7UdAXqsNAIifvcU6AJzuaeH1wwix8p7Z1y+ldoj+6v0ZgPMPb9F/0awPAJ2nq6nPaBxh5LBvc//QL/aL+n+Z/pkBuPwn8XGk929PIlwW+NpZQN3NLcTTcTooAgA3+/MrPXxz93ryykfgh2UfY+hb4s9m0+QG0KBvitzuMr5an48vzW/wvPrrP91p1nehf+jn+2r/Z//0VpFF+0cO+gLz/QgA/vu719/2zb5xEDjww/+NjmejTpOqGvqr9+H5mDTsAzDeCJqujzrNzkXf9v6hn+8X9f+y/RNnZv9ko04DNcX4BADMjyDLOafqDmTXqXIHo0+fPn36q/V1TwBro+uLdCMS6QQ97SizTIVRbPr06dOnb4GvnQWk/ptxmdyeROoXDxWFvgV+1Vk6tvlVZ9HQN8fG/nTdrzoLqMnzK69/jGMAGwcDxIdRqVHyjYNB6Z2hb4ffDQc4H0elZgEt4wPFs4Caqo+cZdEN3fRlfZr2bexP1/3H4SC9SBfNAnq8wPHthgNcyptYwSygvP7J/yqI073kOycOI9zsI51SBCSj5N9fD5LPmKruPX0r/OHTX+PLG8G58rP+i3rr8/HlvA8kjd9U/ac7zfou9A/9/Kj9r5sFtGz/PDlK/MuTCNOd+f733yc3riK/1BhAcLqH4FTzn2bKm5b5DIv+/faHP/8CcnX/6dNftv//xrw/rNF/crT4+WV6AlgbXV+I0fUF1A3p8vMb5sruPH369OnTt8Qvs9GigYkqO06fPn369N3xGYZhGIZhGIa5N/kBJ0Q3p1rqiysAAAAASUVORK5CYII=", 16, 12, 12);
    global.sprIDPDTurretHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gYNEQIJvHwuNQAAAnNJREFUWMPtmD9u2zAUxj8FDiA6gFgulioDXgpIyZbcIV6aG8Q36IF8g/QG9ZLeod1aGygKGKhra1FUoFaADuzgkKFk/aOkQBn0phB8/Jn88vQ+SkAffTQJoyyBc84LAYZhNNwDb7rHl+SfFAlTJo5OXs7GuWt7IKYFYlrgnINzLseu7cm8NvjgHGiDz2uGzk9cnl9zYlqcmJZcnze+PL/WPUSCL5TPGxfxB10920G4xj6OAABDQhNzYizmx45fix8/rScpvhiL+aCAf6Lbc5r0K+W/K4UYEop9HEkxhDD7OJLzAPC0RotPCAUhFHEcSTGEMHEcyfkifmcVBACMOgij7VHFqBXFqNOYn64YosHvVKARm8i/VaHUjY/YBEG4boVPavCNBo9KE8vnru3JzYmDTN69BQCsf/yWfUTkbHYrHctvjd9JDwKAX9tlZa6SW5n/92N1vpL7OnoQMS0AwJdv9wCAq4tpmTAgpoX48Y8WP3x/j1MAWGTzT2dLhCV8o80KqviYcdf2EEbbhHMVxZBQMOpUfcwkf/Thmf9wk0x680m5Eszz+Z01aUadI/fKEqaukzHqIJgf1qtCJe5K83J+ZxWUdpAw2h4dMJ2jU0Ft8QdZB3xhFzM2u5U8hNjkiE0yXUaEhou1yu/ExVzb03Yx5cWyEl/XxfL4nfWgseNLkcpcrM672Nmtj3C2rORiZ7f+67xJX11MEYTr3GoaO37iNqzdqBcHfjhb4uEG+JlysX93B36g86rRRQ8SFZTuEWo06UFsMQVbZNykK/AHeQfVFUnzy6Kx2a34ZreCepCs+Pr9c50vi63x+0+uzfl99FEQ/wEPeQAy0xvqdwAAAABJRU5ErkJggg==", 3, 12, 12);
    global.sprIDPDTurretDead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAJAAAAAYCAYAAAAVpXQNAAAD3ElEQVRoge2aTU7bQBTHf0ZFIgpKsETDxyIskEJWkEOkmyL1AKBeoGLFCXqCriougNobwKZdd1111YCqSlmkkEYyiRK5UqVOF8kzE3sc2wnBUev/yuP38n/OzJv3MTZkyJAhQ1qwohSUUmoigWVFckSZiJAvOv9/jdDJi3KcAFFyR1IA2xsVnO4NAKVXXQDaZ0UA7OImrduryGdNiT9DGNSUSGKiVq2r3EpB5VYKaudUqZ1TFTquVeuK6EjymPwZRjDuuqTRxyOLH4XU9kaF5eMGcB8R/JCI8fvdnkSKReHPMEJgwqZ1Ho8w2olUrVqn7TRDU4sp1ZTsMp+/fjQ+8yPzZ9DwJE3jdnETp3sTurCis6j8GVJ2oJJd9q71hYb7hS3ZZdpOcyH5M6RcA8niyUKXd7cAaH77AeDJ2k5zqhpojvz/KhQJ52ApwDBDDRTztwpg8L4Rm1fTXQR+s9EZa8c4JubMpQyySJuppLDcSgEA5/kHlgEunxn1lo8bONpv3F+91PmVUsofacV5wmQJz8hMUUBFyGJHZk3Xf22y5x8H7KTShcnhnhS1AHeH40prF/fX7bOifuiXCr84gsyP/E/TfOl6/vGE+ZEF9S+WaT0s333T78JszAKx49lIrYi2i5uB7sgPvc1eBH7dKSZtNL/MNA5xpLjpI07EMDpSYXWdXr8T677hXnCzBJ7skSIQjHdAcmYjMHVJSSLQQ/M/dI1jmCe1vVHRX614CLsfITM6aGF1HYB8rsiPn9+AoaPoY7ln0hs5VHgE8offJIiZ663W7ZW3yDBcxJJdNnZJggRd0rz55wrpHkeHmt44zLEAatX6mH6YswFWr99RhdV1Bm6Xrae7DNwu+dz4Sb041MAdRm7RMyGVLmx7o5K4SxpNVmr8D/DVQRQsWfi206RWrXvOA/Di8OWYsi4DPP04MKUwgGrlgGrlIOBQA7dLr98JRB9IsQbKH+3hHDdidUn5o72F458Fk5yxdXsV6gi6E0kUFWhnWRARSSUVLe2fDCPI9blRb2n/BBfofXodWjul+yrj8tnwndVxg7tD+K7J1i6GLzlLdpn2gvLPA5KCliOcXyCboPXGikpfY9h6ugvX5wzcLu7+CQCuCIflD3++vCWfK5KbkMKyk+gE/A9VSE9q5fXU1Haa3hcFYZBNIPpxGw29zpGUVbRXAeg6fQBPJinMxGuMQNMU0glrBKt1e6UmhWuBFIckK3Dnwj9Lg6FzTBLLc9eqdWAYReHe+QXeJhiNE86T1et3VK/f8bqtMGidmZE3+6R1Sv7H+mIziYmE+nHtpN6ZZsiQIYMZfwGIPydVQKE7RQAAAABJRU5ErkJggg==", 6, 12, 12);
    global.sprIDPDTurretFire = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEgAAAAYCAYAAABZY7uwAAAC40lEQVRYhe2YQW7aQBSGv1RNhRUJ1xtwHQkUVYJkR69QhU25QXKDZsddmhskNwiblJyBXWukCgmpLnjjUCmiShfTBRljmxljG7pA4q38NG++eX6M3z8D7G1vm9hBhhixBcbO8l+tAQun2sAolTFKZRAChAh9p9oI4/LlrOabfYHZ/3/8eldQ726HL1qn58IolYVRKguEEAih9Vun53kXifHNvhBmX2j9Tfn1rhD1rtD6afzXuhX8YMx8PgPAMMzYmPTluG83c+S+5L+5W8x/7sT50pfj/kUxfuXzy/zrOF/64fiNnq/6/kTr9Bw/GBPMJgArhUr6lmlTsWoMvn/VMVP5yUIl/U35yUIl/TS+dgfJicFsoi2MjClqkq8rzLb4usJk4acWqGLVwudooaLgilXDD8Y5U1fzVYXZJl9VmHV83XYVTrURTpYL1d6/A2D84xdAOOYHY7zpMI23s3yVzAuAnxM3Yy6x2CxKIwC8HHyvAP/pNjs/ErvCV35iRqkMwODbPQCVs7YS7E1cvMic+Z/fmRIySmXmwOjLgs+Vmv906zIqyAcIPt1zCNBT8w8vXYI1fKWKOdUGwWwSNmVYLW10omGYWKad9TMI+bIpA8w+xoPMh+Xzc6cYXzZlgMdOPOjt3fLZv9bztU3aMm1IqFfSojKf1yzTJkioV9KiMl+En1SvpEVlXmfaHQTxDi/PFNEEkjF5fuFd4at20IE3HYaLSEjFqilVQFoOldkpvlLFnGojt4pFLn7rTDjVRm4Vy8vPq2I6vrYHHdvN8CXWqdhxgbuYYzcZyZdYo2JOAf7RRZPg0s2kYkcpd73Uk3TrrI0fjBlMXKWKOXZz8Q3nSn1pJ1cL/ujWZfYRBpEx82GR+CZ8q7fgB5cujx3CIwMsVOzvzXp+ph7UOmvzgfhJtAUx8CY94uRlB630iC3xrV4bq1eMr9tBB950KLzpkOhCKnu5AWdNfuf4+79cN+fvbW8p9g+2YUi2PegSRAAAAABJRU5ErkJggg==", 3, 12, 12);

    global.sprVenuzCarIdle[0] = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gUfFyMw1tsqqAAAAjBJREFUWMPtVz1Iw0AYfW2vEKhbhzpVcJAQEJwUQpYugg7qIM4iHVwFCSilQxGHLl07FHGWDtWhgotLKdRJEELoIOhkh24tFFqJQ73j0iSX9M8uPgiEu0vey/u+++4L8I8FI+Qxbo25fvYCCumkY/Cs9DlzQWMJmIcg4rdga20JyxuK69z+0Sa7/3o1oOqGNa4Q4kcOAFe7j5CJ5LnOHPSQqe7g/UnhhQQSERaRq7oBAEJyfn51uwxVN1DPKzSRvS6HA7bBel5h5JNA1Q3kpbjnvN5rs1ARAFY9r6CWbbEF/P088OsQVN2wCCWs9LuQQ5E/L0QEACr9Lg6iMVtSzRO8w2EANvJZoRjpoBjpwBz02EVx+JAKXgcmxen3koOBEn+9GvMX4Iby3jMAQMslmCPhIA/65cS4OVPLtljtEDpwQoa5kanu+L6Ut3Wqs4B+zQmJYf04/luQhi8vpJNuB9BUBYyFoNLvwhz0IBMJMpGwfhx3kNGzQVQBaZERQcsloOUS7nWAOnBTak9chtWIJMwLbTQEB9GY4wEafx7nF++sxosITOtbKLLR7NgFHD6kWBKVLj987QMA02edCG+3bVsHY9G4NZodNul3BE+7fdPXK1B1Yyhg1G6ZSNByCSxvKMyZ0a4oyLarZVuuIig5gFDIqwumrkwigsZYtGVpx+TZlPLbKYgIPrE4Yt+2LJAALxH3dy9eHfJsmtLRL2Vf2XyZijSQAN7ShfyY/NWv2cLxA33U/2bLdlmcAAAAAElFTkSuQmCC", 1, 16, 16);
    global.sprVenuzCarHurt[0] = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gUfFyQXPJAJBAAAAzFJREFUaN7tWj1oIkEYfRMnIGhnYaoEUogsBFKdIDZpArniLoVcHcTi2oNDuCNYyJHCJm0KCVcfFrkUOUhzjQhJJRwsYiHcVVrYKQga5gqdZbO77o/u7E7u9oGwzv68+d438803P0CECBEihAZiVcgYY5YPE0LcfHTF63D5OgAwL/UVgMD4qadaGZTlDlkl+Ca4LO+ayj40/jA3gqx4V0p+ulEzMSsvtIUaDTMKclnefXH8VFDX9U2IXCaJnUPF8t7bd6+060FHRb6iMgDo3xcJL3vojaXmp4IaC/PDCblMEgDw5fUPZGl85XPd+RTndyfo3ysYdFTsHzdZiSZI+WIPuUxybScEwU/dDJ5+DWT8+24G81wmiXxFRbuu2BoPQLu/f9wEALTrCvIVlV1XVE/JRxj81C7rEZZiLPl0jnjGvzRg7e/nKyrq8dTK+5XpyBgqQ+OnQYtvdAQhBO26glZ1qJXrr0WgXVe4UIz/D4ufQgK0qkPczCbIkth/xy+FA25mE5xuJ54NaqIFl4V/SwYH6I33C1exMa5iY3TnU+3HUbw9koZfih4gAu+fkiYLueGDjioN/z/rACs03/wEABRqaeFhxi3/1ksQzkksr2K2qkPH3D4ofql7QIkuYvP53YnjsyLCShD8VNbWXqIJHJyllhMilS922a5qbjqBCoNfmhB0M5ugO58iS+PI0jgOzlImY/najN0MlE9y7FCopVGopaXgl24ewFvgdWO09jJAPha3jcsFifilcMDpdsJUYR5/9fj4qa+tsdgZ2GVPtnzG1ckw+aVwQPH2SBvEGp9/O3ZfAOg6PGeHX19H0vCTMBfjgMU+MY+bD72xVjkvaeI66WH5Yk8bMMPkD9sBhBDCjN09S+Mo1NLYOVS0lmnclXKT9rWqQ0sRdOITAKHy8011FpL4/JpZpXTccK8i8BjrsBGv35QJjd/TsZR1RDaGG5dg+nTOjQj6gY0b3q4rRJ+deEBg/KIGYV9PJww6qiYCvwaA798eTUYDi01xP2fGIvmprKJbiaC1st6jyWj9kRARyxKi+DdygMiDWVYnCSxiKrG6Z3UwSlb+6GiinPwRgsJfnRZ6PSla4D0AAAAASUVORK5CYII=", 3, 16, 16);
    global.sprVenuzCarOpen[0] = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gUfFyUwgIGNLgAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAACj0lEQVRYw+1XP2gaURz+9F7gwGxC7JSAQxFB6FY4XLIUupQMZjfBoatQDirFwSEBCWTNcGj3ZJAMHbp0CYKdhMJx3BDQSQNudyB4ch3Me967/2e0pdAPHsp77+7373vf+x3wH38ZqYB5O+Z+O+I9kUgHLVzXDv1+bddwzm8EErRQV8aQBNHXKeee2+4TrmuHqCtje5NMhJZAEkRcXebx6k0x8kWToQpJVpG0JKEO9Nsrw0pjhAIRA1+iWXN8+fbe7UjqRRzot4ssojDjzvX8uztIskodt0OGhwN2kPFNIMkq2mI2cF2ez9jpIQDsfruIh+aUbXD+3wVoaSVZtQk12FuYKKSEPy5EBAB6CxMnexmOVLuEM8NpAJzxbeFGMHAjGNCsORsUlfvjaCF6KT4u9z0WqOHJUN29A364+/ADAFBu5VhG0nEejOJEUs48NKdMO0IzcE5W3KAqFyXFW7mMaDTnJINSNfssSCp3IdWVcaR6Jr6OewsTmjVHgYgoEBGlaha33SfPA35z1LGBbjCRCUO5lUO5lfPXAZoBrbsSpn6MKNxZkQQxlBdldwZO9jKes+qWzbjG42CgGxjoxjoDlftjRiKlMeI2r3qB4Lq+fb3vIa5mL0Md+PV1xmeAGqdeheH07MDTGVHD9NTEucJrF0frDLijLhAR2sLk5h6/VzyRU8bTq9dZwnIrBzSnvmWtXRyxpoUASHUsk28qLRP9dhFKY8SyMxmqXGtGSzPQDcZo7TmQ07MDDHQD8nzmG33H0TGRsHZbs5f49PmRExu//tCZwVI16yRlKrEQOXF1mecingzVQCcAoGOZgGImakpjX0aTobomqf6Ta81jNLnJHfA7ET7nfeMvom19mv37+A01lyneVfZSkAAAAABJRU5ErkJggg==", 1, 16, 16);
    global.sprVenuzCarIdle[1] = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gYKAyYh+lQozgAAAhhJREFUWMPtl79LAmEYx7+nb3FgS7W45FAUKg1OFUdjUxBSSVA0RDS22HBDQ0FGg4v/QERDJEQ/iIYgmoWiQSgOsRCqxcVcEo5SrqGu3tP3vPfszKVnkuce3+/n3h/f9zngP1ocgkles1nvPIDkFmuSqYrqOJAtgGYAWQKkKiriYrflQJmyip1yyTaIy+oNF4mHayA/EZG7iCAVD9bbQ/Y2oeQW4Rfc8BORazBZLXyCx4OQZIVLl7B2/SLxIKNVGt5YkqwgFQ/CGwrWPMunFUiyousJBIBWXbw5fv7r48US1/PFXAwA0Nk7rRGarBVBAODw+AXLG6NU+rGposWHpBEgMtXluMjY5BkAYG+9r+6ykGa95eXJBHMDVsOQv1xvegZ0GFerbkEdxjGATFlt/BTUO4o75RLw5fGJJR+i20/m1m3tgDU6LjrpDRkNqfq2Gx7o4HJAK18JRGIIRGK1PpBPK7jKviKjVVhXLbcNr4x4cZV9BbLXzJqF1VnDpaAVc0fY3YpaDv5894aewXbH6qLbTz9LsLCaQHhmyPJP4ZkhrjqruN0tGGeg+JDE6cHPlL3vlX4t0jbvMRX3ExGyWvgESCz5DAW6+FyoH/vp++/fdOh5uxC0OABBMOuC9TasEQjdE6gWzbQpMe2I6D6QB4I2Iju9IReAGcTazS1L1FZTyg3AsttGRbmuY5a3M9a0eR8mf/Vp1vL4AHth6EkWX8vIAAAAAElFTkSuQmCC", 1, 16, 16);
    global.sprVenuzCarHurt[1] = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gYKAycEqEvNyAAAAxVJREFUaN7tWr2LE0EcfXOZk8Da6DVpvEJRcsEi1RmCpZUg50c4UCyOcKXNWWxxhYIRizT5ByRccXggfiAWglgHTiwCJ0uIR8CPIk1Mc4FFE8bCm9xmdza7m81mJnd51TI7O29/7zfzdj4WmGGGGWaQBiIqZIwxYWVCiJ9GXR6Hz8cBgAV53wgwMX4a6K1syvKEuAkeBtlY3FFW6ZnMjyAuzyrJT0N1E6fykfZQe2B2QbKx+NTx04iG7tiEqPRMFOMLwns357X+da1rotztMAAoxhcIAOhmS9gbVeKfm7CHBg4+TzVfdZM0jsbHHCrFFHSzxQAgT7XA1jNpfuLy8WRRDmUfH3PGh3ySxJCk/nqxbrb+C1dMIasbgScfMvjpsFlPZFOMQz5LIgb481RDjfVG92rdQKWYQiKdctxrVg1kdcNuldL46aTFtyeCEOJ42afXP4RuWxQ8L283CgCAM+fvMN5jZfFTKIJm1TiR/Eok4NWb33jw5Kql5HukfO39HWX4lUhA7vbZsbd57dZ7AMD24wuetiCTXxkLGjc+vb0x1GbckjFp/mObAK8PowzPF/HP4YQi6hHgl//YJKDWNaeSXykLEtlCudsBuh0AQGl9ERvPf7hvHXivQIfajwz+OZXET6QHF0T2fZQrl077WoF6efxSroClXEEJfqXWAc2qgd36AWqsN/ImWlY38DCTwG79AKh/FtZZ27yrDD+RuRVxuB+EduM1tp5teNb9+fUPzl0+NbZ63E5k8itjQWubJaysLnvWW1ld9lXPC3tbLSX4lRkB7f0dvHt5NGT/bndCtz1/X3MNPknj/e1jmfyyE0AIIay0vjhQyIO/l76IF9Vv/WsreHlQEWziEwBS+fmhOpMkPr928PNjwFFE4HPycndoL7YeykjjD/Rbyigi2+3GJ5j1HNaPCNaFEA+cn80CR6dVqvFHlQDi5vejCOAmwqMve46gAeBXJkPsvTNMAqLkH2cCiA/PGVkA0XLfGnSeav3GRWe4YRMQFX+ohViUP2aJ9lYEnkqEYkwR/+zXRDX5Z5gU/gHYYU6oi/LpVAAAAABJRU5ErkJggg==", 3, 16, 16);
    global.sprVenuzCarOpen[1] = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gYKAzgoV8mvtQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAACu0lEQVRYw+1XPWgTYRh+LvkqB3HRgNxiBqWSBodMGoJjJ0FEjYLFoYaMLslwQweFRhxuMItjCBlCCuIP4iAERwlt6XDQEkJSAqYOWc4E2sDRJJxD8p33f5f0Jwi+cMP3w/c87/t97/s+B/y3ORtjM6943K+4nONqPruFuJ8FALQqCe1YMXzIpUImwnE/a/qmJlAdyWhVEvjyftv2YAA42DtWSbiBTX0FuVQI6XwbAht0Pag+lFEY9gEAAhtkAICXJZVQdSRPFwEASOfbSJKAJ0/ChEWrkkBViICXJQUAkiRgC+wpAnE/izDjR5h4CysvS2NvhQjifM0TLrF69UkSQF0ZzZxacb6GqhABF42Y1jpiDXG+pmYPAaAYN7++++3E+W0FTue7rSwA4NK1RwrRMpuHEQD48Ok3Xqzf0Uz/PFPQ7v6GnkDi4eVTB1l+8BUAUHp13fFayFl5+f3zPcsHaCRDzvO+tRGgZHzz6oKUzKkRqA/l2bPAKRULwz4wqfG0N9g2MPcKaMLxaSe5qL4gGev47RsXPVVAt7qylMhiKZE114GOWMNW4wh1ZYTHz6+g6uCtE4lMjMNW4whobFvuWV17qmsKSrf1EcU3aduOSC0T4/B2s+NKIhPjcPXmBdd96Xz77xWsruVw/8mtEz/GiThxtd2ipH8D3f0Nnfo52Ds2EertHNrqg1wqpAMflPqO4LTFEwCm8A9KfSC6oI4FNoiV6KI6XgdQFpvgZckx3INSHwvPApbgE+3AEABMOt82qeAMON24LDZ1JFaii+A3x2GkkaIR7O0cokdTOC+ZmY3TmtHWAUu5/e7lDxWsLDZNJKhpr263KJm0oVYtedaEnDgAJw4gsEEdcFlsOr7qwrCPX7EYowWfSRNaKWFjuaWeaqQcQwWqnV703I6tarsR0OgAXU+e46/Zv29/AOBWJFSdhBiTAAAAAElFTkSuQmCC", 1, 16, 16);

    global.sprMoneyRad = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAD8AAAAFCAYAAADyvjQUAAAAlUlEQVQ4jZ1T2xGDMAyTOhWbhK26BmzCVIiPNlyAGAv0k7tElvwKAQgJpJQCkinHQc/L1W5j72IqjwCEqXlZCAxNAuOD4k0dznzstceM/4vAS0VWPirC5+Cw8Hi+RaKjopATTawWlXntTUryIXkqvnZmyCd9C0NH3zXkdAtA0ICO16WBQT6/tU/grH3X1NBy/uYbHwcbgpBSsqSYQW0AAAAASUVORK5CYII=", 7, 4, 2);

    global.sprPortalOpen = sprite_add_base64("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", 18, 18, 18);

    global.sprTankIdle = sprite_add_base64("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", 12, 32, 32);
    global.sprTankWalk = sprite_add_base64("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", 8, 32, 32);
    global.sprTankHurt = sprite_add_base64("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", 7, 32, 32);
    global.sprTankDead = sprite_add_base64("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", 11, 32, 32);
    global.sprTankSpwn = sprite_add_base64("", 56, 32, 32);
    global.sprTankChrg = sprite_add_base64("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", 8, 32, 32);
    global.sprTankFire = sprite_add_base64("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", 3, 32, 32);
    global.sprTankFEnd = sprite_add_base64("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", 5, 32, 32);
    global.sprTankExpl = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIAAAABACAYAAADS1n9/AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4gYOBCIFKBaIyQAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAEtUlEQVR42u1dPUgcQRR+c15hGkE4TWlpEX/gIJWoSREjkSCoYJVUKaxi1Cp1IDZRc5DCIlWuCmjgOBRzaTzlKkGIP4WlZUxAMIU2YVIkc87u7d/87c7evQ/kdB3fzM73zZv33s6dAAgEAoFAIBAIBKK1QDTZoTHYJbZOIqXUcf+EEKLbri6bxgTQObEBHb3TAABwvkp02aY9i1S3TeMC0EWYKWHxyJiYkP+kUdttxi0KG21mbJ/Iq7PN1IogDcLKpIGstIrAxIrVbTeTFuWjJzAjgkyaiEqjCEx5AV22jXsAjiiZr6YRgQziEIFqWlHvvHNiw/ELlhIynK8SuHP/mZDx64Ni/W/auyd97SeVIppc3cJESqaIWZX7FyG0Z5HCxf7zBiKD0D7h3fbmotQgsFYmPwkPQN0r3gt+JF2dbcLNRUl60N3DnxquxekFbCVfxgtkkxhoR++00gqef/qr/n2hnAOEpUEgH7AhWlAAKAIUAIrAckjHAH5BnEiUj0ixALyIVonsRYCBX8q2AAQKANFsWwAGgs0BlcqZZzXw5qLkGR+YLt3G/TzAxmqg1ZVA9ADN5wEABB7FRnlw9PHkMHLHL/rycH1Q1H0/qfYCMh5A54RRFfJ/txXh8/d7jmuzg6fQ9mq4/vOf9/uONpwIEj8tnKQYVE4LZzQRr3zzbvL9rtkGkcMbzZgFKD0WduCkT1WELXsghFJKZb2AcgzA3rgRBP7xrR/uPnngeX128NTXK/zY3gUAgMWHXQB4Iogk4QEiRfcFCPcA89u7viIItI1lYSVYUwkslHP1FR119SP5yccAgU8Fwx4OuWODQjkH89u78PJ1V2BAiORbJICwp4Lt3ZOeQaDf1lEo5wCWfzYKYxmPgVkpAFPbgRtv3lUTPwncygLwjXYvt2YchR5WnbuG29eO3liCZWoo00nFEXC/MYZlB1EEQOcWVgAAYGx8oH5x5e0H6M+PwPHhHtSqtyVZr7ZTj2/HEKVuIIOh0dutqD8/Uu9/6vEjpRpB2s//h9UIMlHJBwCo7Bw5Xtlks8l3t2Xtvnz9BkOjkzC3sAKXWzNGTg7150ccr3zfIFmpbJY3fwTdh3AaWNk5guPDPc/J92vPC2ZuYQWuD4qxHB9z942Q2ALcZEchPaoNE16A9SUyPhSAxCR7TXRUoodGJ//FDR5v8RIFn07y/ccluqYXgNdK4lcaP9H89SDR8OSppHZ+5LMxowgM1gFq1VJD9M1PPp8FAACsry3V27K/DSoIhRHOp6HMptdYxsYHHP0hNAiAW1mkVi1RvwCMCYF97yaCkacIElQHMBkEEkJI0pkCS/Fkx5E1SQDzArxgwjIW9yp2eRwSVaBxBYEiBIQVZcJsWPM5gSJkVHaOhNoruGsSp6sXJcPUJ32q2s9EWU1xerRW3o9Ni0R6C5AVQWXnCNbXloSJ1bmSbcgEkiBWlwBIrVpylIODJlTXZHvFAaKi0DEWG4I867KAsP1cpjBkAmwcMh4ozStadLw6twBSq5YoLwCR4M9tRzI+ILVqyTeTMD3JOj41XMWOjMfKCqz61Oy5No3Deu+g2R6NoQ9rx2Dq/wakbQwIBAKBQCAQCAQCgUAg7MRfOeGzOZ/qO7EAAAAASUVORK5CYII=", 2, 32, 32);

    global.sprArm = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAADAAAAAECAYAAADI6bw8AAAAjElEQVQokWNkYGBgsLb3/88ABbpGdgyXzx1i0DWyY3Dz0GPABXrbpqDwdY3sGBgYGOB6kdkz+osZGBgYGHEaRgFgYWBgYDh6cCNjRmHvf5iDL587RFAjzKMMDAwMxVU5cHE3Dz2GXTsuoYjP6Mdr1H+8sgiANQBY8OmAOWQwA0YGBtxJCB9Aj6WBSkIAIW405P/PDg4AAAAASUVORK5CYII=", 3, 1, 2);
    global.sprClaw = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABAAAAAICAYAAADwdn+XAAAASElEQVQokY1RQQ4AIAjC1v+/XKeaoZicVHBMNPSwqDdfMPkIBH81s3A0mnEfFnytXANGV6igMjgcHJ+eoDLIxOknymB+ywCwAStgCw4LkcXDAAAAAElFTkSuQmCC", 2, 1, 4);
    global.sprClawWalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIAAAAAFCAYAAACNQ+SgAAAA8klEQVRIie2VMQ6CQBRER2ND4020MKEikc7YcYLtaYnnILb2noAjYKQyISbeRcu1Ycn62eUvRNAYJ6FZ9s3Mh+IDw0sGYSQBvDyeL6TnC8mxJt6RHVON+fTOQRg5z2rjUc397uIT02EViMVqDQC4laf6XXmfAwAel6ORpYqTVOp8F584SSXN51jV3dZf8YrV71PpvM60ZfbhbR60P+dBfWz/T/eYmUyKPEOcpNhsl/XZYb8DAHi+aMtvSHkoXsnFx5TPsUWeAYC1P+XVfSrKl+crm9mXN3mY+rt8M25+6jFlHf/6aQ2+AsbWJ1bAN6nrCngC1ZDFzfx/IDoAAAAASUVORK5CYII=", 8, 0, 2);
    global.sprClawIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAHgAAAAGCAYAAAAITFpjAAAA1ElEQVRIiWO0tvf/zwAFukZ2DAwMDAyXzx1iQAbnvvExGHF9YqCmuu+nFzMyUBn07X/9H5k/cbMIQ77vGzi/yFGU6nYOpL3EAJajBzcyMDAwMGQU9jK4eejBJWb0F8PZnKaxDNRWx8DA8B9d3a4dlzDUfT+9GMM8XOqKHEVR1Hn+v8RQ5Iii7j8J5jESGXH/ibSXWPOITjDEqGNhGAW4ALERR3XzqKmOcaCK6FF19FE3kOA/AwPDf2gCw2AzMDD85zSNxSo3qo4kdaMAB6B2AA5IBAMAvSeStHR/+OsAAAAASUVORK5CYII=", 12, -4, 2);

    global.sprPyroIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAeAAAAAgCAYAAADKS6uVAAAESUlEQVR4nO3dP2gbVwDH8Z/6BxlKMRg3GEHRny4tlBqXFoMhqU1bKPZQdeqqzKbQTOmgwYOHetJQNBbf2k0d6mQQROlg8CQ0tUsld3FKWgoZCjYdroPy5LvTnXS17vRi3/cLh+N3Rz6n9wQXSSciERERERERERERERERERERERERERERkZVcs91+z67/xW0rvvVemAXAx8fHv0n+5t7w56tvrPmsGNvc/H8eDrc0/Em9/PqbCvHnXbrPP9sLgI+Pj59V32svbjVDN+Ob39P0b90d+Davb8aS9KfNv9fXNVv/V+Ic1Nkb4v/+2XUXt5rKl7Z9+y9OjyTtSpJu3R1Ikp4eluP81bHCx8fHz6rvtSVF+Ardl4bvdc/u76pw0Bwbe+0wOT9q/i/9y2MXt5pD/7P0fdMs6/9SnIMmLcDgy/LUsVnDx8fHz6ofZr8I/ryKmn/bfhLzH+sCbHsB8PHx8bPqZz3b85+mH+sCTERE5C1f2lb5h8HUsZvqJ9FMF2DbE4CPj4+Pb8cPmvN2L06PRp9/Fw6aKhw0fWNpl8T8x7oJ6yonMs/w8fHx8f0trxT11x+/J+5tuN9LklrOvm+8WqsHx11JucRPwJxDMXp/Kw00olnW/0oX4KeHZVVr9bEFkBQcT2UB8PHx8TPiu5J0PjjSQnl49625AE5seB6p+KaYc5B4tv8BkOT6x3kLerQA3lrO/ugBxxmfIXx8fPys+qrW6vr5x+90PjgaO48Yzfx92KDvvfB4H2vE+Kz+2PwbJzjPUeNJ+6YoJ+n1d6u1unvS67v50o6bL+34vmxcrdVDv5gcGMfHx8fHv6LfcNruSa/vnvT6brVW923efebPZl8avvcxzssPm/9pvlJe/8BjnDQeWZyX5261VtdHm5vaWKtIktZXK74DGk57tO+429fGWkXrqxXvy/FZ3gbAx8fHz6T//HNcN1/a0bd79yKPC/rH3b4edzrX3lfI/B93+1b9JNd/6mfAyyvFXMvZdx90uqMFaDjtqWfdcNp63OlMPQ4fHx8fPzzvTVTf7DUkaeKF0FvL2Veh9E7u7PSXa+uHzf88S3v9p16AbS8APj4+flZ9ScotLOUuTn9y86Ud33mYm6LO7u9KT4bHvrsiFb5u6tmjXb319mrut197M9m2/bD5N03yt4pPrsX6x3ppnltYknv+92gBTL4J8FQ4SPwJgI+Pj59J/3mjt4E31iq68/lXY3cle3v2aFdK9g5ga/5V5395pZhL4mtYaa7//5mgzD4B8PHx8W365iJw0ht+/hn8HNJbw2nrXu2TG+Ur4+uv3MKSJI3dCRe2NZx2Enef4ePj4+NfFvTH9jec9o30bc+/Vd/8f4jmBCS573+wHnboCF/98A4+Pj4+fgr+x59uh+7Pim97/ufp+05Ansk348H9ieL4+Pj4+PgZ9YmIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIgo0/0HfYuy/x51fB8AAAAASUVORK5CYII=", 15, 16, 16);
	global.sprPyroWalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAgCAYAAABEmHeFAAAE0klEQVR4nO2aP2gbVxzHvyotMngQlNQYL5a0hEKocWkxGOpaNC3BHqItY85ZTaCakoIGDR6SSUPRGKK1mzvEyWCw0sHgSXjqJimLE5oQyBCIyPA63P1O7+7e3b2T3t35z+8DD8vvzvf9/X7v93vv3bMAhmEYhmEYhmGuEoW8DWAuDUL6fGHy6ou8DTCEoPbTd1dSP1U2W/bPr75ZBSRffQ0fX9hN7ssQjy2XCp0B+PjCbsgnEH59o/j8B8KTMDX/KfalWkeUah2xsDP0tFKt48ZgYWeYSwFMMwZaK0DeA9Br2dqf3/ZFqdbBws7Q00q1jnsv9ZkkrgBlfYfU/Cc9VaMZ2LT/cuz9jEcHGN6pBPqllWBmdCbAkDGI5Uudm3wDAFUgzh7sAgCWHtvXPhzt6jxai7ABGI8OcPZg19WU++afGpMPFGCxvOXTn9xbqnVs/Vvm9FX+kw3EeHRgTtBHWPJnhT/+ACLHYGFniOGdCuZvQSDmfUSrAMLECTn4/msmyHsAombALIjSVk0CgD0D6yTARSDN+GttgZIsf2FL4kUm7wI8zxTLW6j8FdxyOSugkeJLM/4X+hRIFfywAbmM+szsBai1BTrv5J10eepPtL3vACZnYJlPQ1untvwaALDf3ZtoHgF1q4l1PMG+3XXut2C6xsW+gNFLMCXCf08rSZ6fSP/D0S7qVtMTfELRb8KGxEuwcwhg3H9KwLlK9LuWaf1ieRtzlS1Xfzx6hrrVBIDAOPj6U4k/FWAUBvUn57+lWkcAEHWrqTyOUvTPrA17ADz6CWwwQZ7+A5L/xfK2KJa3XS2VHb5+I/rt7qFodw89+nE2mNSn2JO+pu9G9PNOQFG3muLkdBAIfkY25O0/4CSgKgZZJSAVwMnpQJycDjxa/mv02aR+WhOAzvIg6lYTfzTuYeP2fQD28kdobkVmWYZE3Wri581NrK9WAQBrK1XPDe3uoXvtuD/A+moVaytV2YaZ9XP0H7CTDACUMfBfk2NgQBtwtkCPWo3Im1LSF8DEx4etNoDJGERtw3Tir10AeSXgtcVlvHvzKnYA/PrH/QFe9nrGCiDHAgTyTUBXX0ZlSxYFMMUEEGlD7CnQtcXlwn53Tzzv9V2nSTCKdvcQL3u92PviePfmlfuZqj8uEYj97h6Wyt8Wzkb/Tq2ft/8y5D+gHwNDFMajZ24R/PP3n+6F335/DsD5JoDzXnpjEZhfsf/OhDYA8bDVxqNWA8f9AQC9MdB9uA6eGUCn+o/7AzSsmzMnIAAU5r6G+PQ+MAvRSQidQBFLjzto3b0OAGhYNwFDMzCRtf9+G0ITUCKFY1ClvmyDTBqnUERY8U+zAmkZOE0CSt8FMrIEA96tBqAOPGG4AABnEGjwZe0MCjCgT4TFwHACujbIv5yc2rOxf0sokUoBAt4ivPE6qK87ASQx0N2Hrq9WsXH7fuRZdOvudaODT8EmIoKuwrgNUf5T8gNGCwBwEjAq8WhrYFhXaYdEFv/sCi2ADFYgexWAnQTKozC50bEYDB2DOV+H9Wh8/8OaiUcnIdTfsGYyBiF2BK6lpJnEhqx0I3PQqG30fWyFaJyRlwLJ/yTkmSBXgex8lQsAgPjl1y1Pvz9BVn7cyMIshmEYhmEYhmEYhmEYhmEYhmGi+R93Iyelp5dHhQAAAABJRU5ErkJggg==", 6, 16, 16);
	global.sprPyroHurt = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAMAAADaHo1mAAAAOVBMVEUAAAAAAAD1uAAPQZUWYd9QYHwHIEvJ0d6PoLz///8KKV8HIEsHHD9oTgADDiAEFC89RFBVWV4KKV+mPvGqAAAAE3RSTlMA////////////////////////Pj/cLQAAAOVJREFUSIntlcEOgyAQRFnAhf3/H+5CjRhZGNKTSZmDNb4wT8Giczt/GBGZciL6mUvLaKzG+1EH4gIEFKImeB+jWYC4AAGFUIZrQfBWAeICBDp+WoD4WwTjOUZ8WVAzEYz4Q9AbSkHDfcPJ9RWtR9TfCYh4Krj4aYCCp4GOxHwTPBsqp8vQPwIW5JTKdf3JSY5eoKBUD/jCHHH+phTkvgBxvMjM3AqMRQZ8YavQBl1IrwnmVgE4/iNwTlpQY90h4guGsoo1OhGWAXDXaseC88zc8RFf+Jglc9gyd6DfgY8l5Ds7L80HFvIQjGJ2Au8AAAAASUVORK5CYII=", 3, 16, 16);
	global.sprPyroDead = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAgCAMAAABzRoe3AAAAOVBMVEUAAAAAAAD1uAAPQZUWYd9QYHwHIEvJ0d6PoLz///8KKV8HIEsHHD9oTgADDiAEFC89RFBVWV4KKV+mPvGqAAAAE3RSTlMA////////////////////////Pj/cLQAAAdtJREFUWIXtlw9vgyAQxT2x/JkxYL//h90d2KJycO0WsmzzJdqmr8L7AQdxGC5duvTH5Jxr+gDwLb+nXBbrQ9Q41jJKfm85AQDUhFLjOE1sQMnvLScAgFIUDwOqkQso+b3lBADM1wwo+d31TwDqa1zyu+tVgKgGQM3vLicQUMBslwk3H7fQeJe6avnQ2ofhoXb+ogMA3QR4+htBK7x41uBYVBgA7pskgHPzcDNa7wDOz0cfngSVIRSW6QDbXlyrI5jnGcPPy/IFAGsM/Y4f1rhbCYAGRa/4TB9sfDU1ACDG5wHkNaRtEgW0ZUDJf6EHazE/MhAALqIyfyAAvBBglgDKp7XWOSDTuuC/MMnWEACdI/EqxygBLBFgaRMw/VNCHUdnZEZH9iUAnIA2APg3ALiDQFujVRI3wpJf5H8PAPcGH9YWgExAVRqFC4UjaPll/GMXEGvIPA5zLOJDEwDB+wSQivhjDuwUnL+dAz5HowJQ8bn4+y6QOZaQUVl7AAhhA8gqAeSXMcOubdnn8+fOcMp0AjCw0wHAR4A1uyxAM98gvWhVfREAaAcAmwjwZmgv2wNgAXiPGOtKF95XJn9XyTWQaidCFACPPwTSzwAM8kE2wFFlC4J96dKlX6hPhDwlYhq5IYUAAAAASUVORK5CYII=", 6, 16, 16);
	global.sprPyroWeap = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAABoAAAAQCAYAAAAI0W+oAAABG0lEQVQ4je2SsWvCQBjFf5F2LQYFQQrGxQwha+buGTrUrf+FQ2dnh/4TpVtchOxCN1dxSJcqSKGTkLXDdWgv3F0uVm5w8sFB7ku+97738sEFjvCOvBMOPW5CfppxEz5UhbKYc8jHToKtY0Mc8jFlMdeKg4lgMBHw67jp1Mnk9LZ7HCW1hn3wVLn8fg3pdNsMgxCAj23BMAhZ5C8ql07sp5kaC3GU1Agk3rgH0L6XkHHvnj1NrNHBerOqnvu9EZ9f7xqhrN1N9cmXUy26mhCAMAg9tS7R6bYB1IhMWJdEE1JqAiNW+V/+IvmX2IS5ddam2+3MRi6PE8z1FH6aiX5vJOIoaVzdU3Bl3K0TXj8WlAAbZwMnWTdduKudAz82B1oNMXX49QAAAABJRU5ErkJggg==", 1, 8, 6);

    global.sprPyroBotSpwn = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAQCAYAAADpunr5AAACHElEQVRYhe1Wv0vDQBT+Ii4VFAKlg0sGByntoqAURZwloINu0k4OuggNnfwbFNzcFUEh7eZQMnZxFZTSf6BgLRS6OGh5DjXX/GxeTEtU8sEjyZf33b27d+/ugAQJEiSIDVLcAfiAPLjfGmskzMYdgB+IRjmQpH859wCAmbgDcIDgvfqD/gl0HhetvsKa52lWAHHr4wbJqk6KRjYoGpGs6pwEiAHT3ZYw2CeDpf8sDG3a+olXwKRWwNx6SVgYyKoORbOPU9EIsqr/SD+4bExV7zoDOo+LyBTarkw1z9NSttIN6p8yhTYA4DaVE+Th+wuyla7Z5tgNfWF5X7xntq7RaZQE33sI6n6EwWVj9LHB15m4fxrFP029swLInPzbVE4YAHMCA/fgqCuw36qi36oCgJh8KxcEM4HzgyKWNgjzg6KN5+qP8qs4O3nGUX51qnpXBciqPnS+ygtO0Qj9VhW9hwNWEABw//HK9rXCq4933LD11kRZE/hX9OIQ3J1NCwtzCCra8NBMrRVtT0Ujlv64fOHlR7W6warAbx/a3N6jWt2wtsfRCr2PTVzvOoTNUjFWdvB0+gZjZcfGByHqFhIRdFy+8PxRqxsAbwFMRL+5vYda3YD5zdQPK0BWdUqtFYWZHDMAz+yHXMFheKfPuApgXyMj6gF3NXvqnTcSziDH3WKseonB+7Xh5ePHj4vBCa5egjvmMP1LAe8Jfgu+AHk2nI9SHj1tAAAAAElFTkSuQmCC", 6, 8, 8);
    global.sprPyroBotIdle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAMAAAAAQCAYAAABA4nAoAAABNklEQVRoge3YP0vDQBzG8cc/s1Do5NLRwU6dihJ8AR0c3IVCh3azHX0NFvoqpIXavXTM4ioI4lvo0MG55Rw0CUmqFyMhXPt94Ae54z53lxDIH4kQQgghhBBCCNnXLJ9PJckk6+2hisfvvA/BuvlVZuwlJ3PKr5upi5HJm7GHL9kHlcdnvX8Okx2V1lS1QTRuM/JVGxhVWlPL2sV4Sbn80Z0XVhnrb0Y+/p8+qCLvv+OfJpq8nEeNi0xrF+PbK6n3d//YXkWN3P57D2WeP75Qn3oCnJzdSJI69Ybue6/q1BuxflvweJd86gnw8f4UHi/921SfLXi8S/5gS99vHxrbxuPxzvrkK5Dp9oeSpMura83mCwXt2XxhmxyPd93HfhWZbn8Ya2fZAB7vsA8H2o7x+F31hOxPPgGk9QdRU37vyAAAAABJRU5ErkJggg==", 12, 8, 8);
    global.sprPyroBotWalk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAQCAYAAADpunr5AAABpUlEQVRYhe1WsU7CUBQ9GgcnkiaGwYWRQScnIiFMxqEDiTgzOXRwKWx+g42Ozk6YFBIHEpGRxLjqYviFLiRMDpDrgDzoe6W9j4qEtCd5SXvbc88577ZpgRQpUqRIkVTsrKkv/aPWVuvvygXv/XDWwLe+bg+4wgQA48J0UbOkXAtD0vWF4LgwXdQsyWZC+YbpUq5Ogj8ugHJ1IsN0Wfyk6e/JBcN0kclXgbfpGzO57yNXJ4wGLQw7lxH6czx9HM1PTtm0xOkrA9BtICOTrwIAro5PkC09wuvXkP2tDzv8PknRVwYQN8Bo0BLHXr+m1P46wLbry19mMkwXAPDtPYvifrYCALNXMOpvgizbwcNdg6upqx/ZAwCK5QoaN9d4ffkUXtrdHi7Oz8L4cfJH5eZ4B1m2o/wBgPcBEj1mq1iuULvbI8t2qN3tcXss1Wf2EBlCsmj7Z3CDrmvvgXxDkAkOfAEY5n1cy3aWhWcNMGLDQjdRyunrxdjAQD3dDMoUmU9AYC/Nwfk4cXQ171/kKfkXaqt4WeSt6isWeROGVw7K4G7CU4p14Qff3M5/xpsrJQAAAABJRU5ErkJggg==", 6, 8, 8);
    global.sprPyroBotChrg = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAQCAYAAADpunr5AAABKUlEQVRYhWNgGAWjYBSMglEwCkbB4ACvTkgxMDAw/EfH13tERvXTQT9cwx8LCP6/whbdMLro/7/Clir2/7HACAy66EcGJOhn+C/ovea/fNF/FAfIF/3/L+i9higHDBb9yBFIrn4YJks/EsCnnwWXSSsvaiM4VgSsHYT6/044jKAp0E+u/cQCJnQBPvVgBgYGBoYUHSOGqswrDCk6RijihMBg0c/7N5ZB2eo/A+/f2AHRz2UWx6BQDKHx6cfIAZ9uroWzXx2OwxAjBEb1U6afgQFLDc5AZAXCwMDwP6OwF6vedTt3k1SJWdv7/88o7MVmHrluHwr6EQFobe//f93O3XA+OQGIrJ9YB+DwzIgByB5GDjx0OaLMQtM/CogE/4lgk2PWKBgFgw8AAIvCtkvVLVDqAAAAAElFTkSuQmCC", 6, 8, 8);
    global.sprPyroBotFire = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAAxUlEQVRYhWNgGAWjYBSMglGAAK9OSDEwMDD8R8fXe0RGhH6EpkUPEBjVMOL0//9Pmf5FDxBmkKsfZgbx+hn+C3qv+S9f9B+iEYrli/7/F/ReQ5QD4PqRPDCY9bPgNGrxQySOPAF78ZgRK8/AcIE87RSBWHk0P2AHTOgCfOrBDAwMDAyck2sZ5C/IM3BOrkURJwQw9JvFka+/mIF8+83iiHI/Rgr4dHMtnP3qcByGGCEw1PQzovEJFhJY9Awn/aNgFIyCEQYALPLcM+Zm9kwAAAAASUVORK5CYII=", 4, 8, 8);
    global.sprPyroBotBlnk = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAACAAAAAQCAYAAAB3AH1ZAAAAlklEQVRIiWNgGAWUgf8D7YBhCF6dkGJggAQtCr7eI0IT/YxofHic/v+PiF5GRhRl6Hqw6scDUPQzocsKeq9hkC9CNUe+6D+DoPcaIswmXT+GA+gNMBzApx7MwMDAwMBlFsegUAyhkcUJAZg6TtNYBvmi/wycprF49bOgC3y6uRbOfnU4DkOMECBVP85EiAdQNRGOglEAAOMoN5PB4TdiAAAAAElFTkSuQmCC", 2, 8, 8);

    global.sprGiantIdle = sprite_add_base64("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", 8, 48, 48);
    global.sprGiantWalk = sprite_add_base64("", 10, 48, 48);
    global.sprGiantHurt = sprite_add_base64("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", 3, 48, 48);
    global.sprGiantDead = sprite_add_base64("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", 6, 48, 48);
    global.sprGiantRifle = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAGAAAAAgCAYAAADtwH1UAAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAACd0lEQVRo3u2YMUsjQRTH3zQigoUIosGYSEIWsRCuEQ/xsNAqxVVpJFhce9wHOCwPP4DYWonNVVdcZ6UErrOxkBODMYYLBJYUaUKauULe8GYyK7txdzaY9682Azs78/+9N+9lhJQSWOlJMAAGwABYDIABsBjAy4KEiHVBUkrBACKY/2FrBzLZHOSLHjQe/kK+6IV6t1RYhfv6o3oGALivP8Lp8dFYQxgbANR81HuCYGY2rid1AHRhJgAAgH/PT3Dz5zr0fOVKVQFDIKfHR/qmA8xIep9fv/8AANACIlUAQghZmJuF5empRObPL8yr50bHh6u2r34fbpSs40mpXKkOBZSUUqQCACPwcKMEtWYbtleWnHz3dmYRMtkc3F3+Ut+sNduwtvdZZU2UI29UlQqr8O3LgTsAZsp/WppX0dno+FqkuhD95u3MInzc3ddqBj4nqSEAcbd/YQ1PG4DvbWoRn0oGCCEkNcnV5ulYqz/QxpanpxJbz1gCwKIUtOA4iiFunBoQNDcCMQu0+X6Y9eE7dG4E7HubQ12X2YnF3hwUPdUJWQGYG4oaiVENek1oVpyic/by686bkEw2B79/ntuPIFuUxpX2o5iaNAAXLehr1yQagFEjPoxqzbbadJCp1IzC3CzUuz1nRqR6FUEBtPqDRPpyCsAGodUfQL3be4kKIWS5UlVpCu9YqQNA482rgpOzC9UpMIA3tHrYYppHDj1uqMmTZL4GAO9kaIsWpRBjkTX7eWwlaaSrAmT58zcpR48GACOPZsGoooXWLKI2U20QJsX8IQBvuZkMazgrAEBYCDaj2fCYAAQdCWy0QwAsBsAAWAyAAbDc6D8LrgLforrytgAAAABJRU5ErkJggg==", 1, 32, 8);
    global.sprGiantBullet = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAIAAAABACAYAAADS1n9/AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAC60lEQVR42u3dPU7EMBAFYEe5xTZcAyT2CNRItHAKDsApoF2JmiOAxCGoaKg4AigUC6vNvz2esWeGl4qGRfH7PBMSx9t0XRekj++zhvRH2teuCThEj0YKADV0YDAMgDt0YDACYC349uJ6/8PtfdwH3t3sP/fpARA0A5gLPjnwTBCAUAHAVPjtxTVf6AsYpiAAQSEA1YIHhPoAhuFXCT4CAhAIABiF/9qpOpHvs0Y9gt1mGzVoVx/PjSoA2sPXimAY+OXJS/TvPr6fFwGxCsBK+JoQHAefEvoaCAkIiwCshV8bgUTw0hBmAVgNvxaCEuFLnE8UAGvhTyGQBPAXfonguSvBJAAP4ZdCUCN8TgQjAL3wNfyfz3yfgBNBbviHW+YhrI/zwu3wnHNaBmB89ktWAWr4LM9JBqhzKkEPgMfwJRCQw2ce0+NzoiKYBOCi9C/MmhwAWsLnQnAA4K73C10L7DbbTkv4QwTtZwjhrWMA4Kz8c7UByuwvNZbUcxsBcDn7GdqA5vBHlSAVgPvyz9AGUgHUGsdUBGMATst/bqlM7f3VxvEXOQAwArAy+ylVoAfAdfnPuA5Inv2WAHydhv/R/zOqgJnyT2gDfQDOy38JAJrWSQIAAwBr/T+1DQAAAAAAKwAlYwgAAAAAAAAAAAAAuAgEAAAAACqAPwRubwT1ngUAQDYAFeNIBoCHQTwA8DTQHwBL1wFkAP+hDWBByASA34HpAMB+FSAtCesBwKJQFgA1JhN5UegxAM9VAMvCFwC4rwJ4MQQA8GpYJACPbQAvh0YAcFsFmGY/CwLNr4ePEGB/ABEEIwwxIEptEOGtFWCLGAIALwiwSVQGAOsISoU/RFAKgvg2cZYRYKNIIQAWEGCrWGYAlhBgs2ghABYQYLt4YQCarwkshK/1IH1nkJotZQR3AQWA1JZQEgK+JqY+gEUIIfBjmLkViuArA5iDkA0i4ssjEb4iAGsQuA6ErhyABAaEbhQAFQQCL3f8AL38AL31KmUOAAAAAElFTkSuQmCC", 2, 32, 32);
    global.sprGiantBulletHit = sprite_add_base64("iVBORw0KGgoAAAANSUhEUgAAAQAAAABACAYAAAD1Xam+AAAACXBIWXMAAAsSAAALEgHS3X78AAAAG3RFWHRTb2Z0d2FyZQBDZWxzeXMgU3R1ZGlvIFRvb2zBp+F8AAAElUlEQVR42u2dPXLbMBBGgUKXyEzqHEGNcgZXbtxaZU7gA+gELp3WjaqcwWl8BNee8SVUIEUIGaJBij8gCOy+r7NlSwKI72GxXIDWOWcQuqLYILF0S/2yAABNML90GDgl7QQAaJbxpZrDaYEdAJih09ZGO2/z6qxCAAABAMDMeNZhb8zDk1VkfknGcEraCQCYFZMCQIo5yAEg1aYAAAAAJTJEbYPHKWnn2L4QedsTAACAdG2tO++hUgAgj/nlQ+CwN6c/v6XcAQEAaBEAiIXAafu/WQAAAIjRaWvd5jV5/9RkkCG3wxwAAAAAQCYAhkLgXBQFAAAAALgSKldoEjWlsQAAAYCOvjDGmM3N/ecvH54AAADo1vO3n+72+9/evyndDKkhUPtaOdz/QLgPADqNb4wx18wf6vi+M3cfL7ZIANzc+9lOPQAmQkB8QQ0AiJh/qHFOW2uO77vzz6WBICUElGbLAYAGAHjz3/36MdosIQRKBMB5/TsTAgAAAIgEwNn8Hy/T3qCpJJMCgSbZBwQuIYD5JQJgzszfhsDz45t/H2sOe3fxfof952c+vmWHxJdMeE9bvcnb2rw6imZQ7sjLLg6A2eaf9rmrQeDC1BEgtAFwfN99SYouBADt4baarbwpxkMSACxUMVcNBNptj83+fmkTQiDxnQ/txToaDy8tIwJYEwA1QyAhABj89ME6OQBf7LMmANbah966Hz40B2B9nyUCwNCOt8rNDwDEAmClKKArEuhb/3sA+NdmfudSj+52K30eANAKgDVPo+k6HjwM+33o7xN/wW1TO7G9bkLS1WY2o83R9yPGHgAQC4CVL/Bpa10s0x9b+4cQmBEBlHpCcX4ADKvNwPwAYPFliAtnew+EMApIEPbPSbqKMsGI4izMvzgAEm6YqS0P0AeCmABA+qVXx/jD+EsDYCSJVQCgCwR3Hy92Ztg/t+RalCFi282bMYjxcwIgvBArLwXEX/gZSy4rtT9SRFUAICGJV4wErHTz+/zChD6W+AhvTF8KAPzAbCsXDEoL/wsDgETzs8YvDQAxCOQAgD9LQAMALiKtYcsAqeYHAKUAoA2BGWHqJPMbY9QAoA3Z3q3JPKoL5QJAbIAumhBsDhDx5jfGqARAV/ERZw2g7AAIw9RFZv/gQJC2+TUAYMiyC+OjVQHQhOVpDtFsDO/NHpNWAHTkBDA/kgWAoebXCACEigRAU+2WAiS9r2ue/RFSDQBmf4QKBUAjtxQAEh+qgRAASK6jceZ2OQD4SKNWAIz87u2LBPBQ4QCYdmJN+P+dCcAaARBuXR2Zu4hdIACAdAKgtoq/9t79MKoZ2BYAgKrMAcxbBlQOgPMZCZFqyJHly9S+ozoBMPmJQT3hfyUAcENyGxTuINkRgJl2gs2123+FA8ANbR8AQOIB0AZBW7GNLF3G95IAAMwvUtXdrckGgDYE+ky89KGaACBbP2h8Fp81FeVtsgJgaXCw/i+yD7Q+kJMIgFCwu98JgxEA0AkATU/pxfwAAAgoMwQAAACIdTDmBwAIIQCAEAIACCEAgBACAAghAIAQAgAIIQCAEMqpf5W7na7sy8xIAAAAAElFTkSuQmCC", 4, 32, 32);

    global.path_queue = 0;

#define game_start
    with(instances_named(CustomHitme, "PlayerAlly")) instance_delete(id);

#define IDPDPortal_create(_x, _y, _elite, _freak, _van)
    return mod_script_call("mod", "popo", "IDPDPortal_create", _x, _y, _elite, _freak, _van);

#define popo
    return {
         /// Popo ///
        "Grenade"       : { van : 0, lvl : 10 },
        "Pyro"          : { van : 0, lvl : 10 },
        "Turret"        : { van : 0, lvl : 12 },
        "Chest"         : { van : 0, lvl : 14 },
        "Explosion"     : { van : 0, lvl : 14 },
        "Shield"        : { van : 0, lvl : 20 },
        "Projectile"    : { van : 0, lvl : 20 },
        "Ally"          : { van : 0, lvl : 24 },
        "GruntTrain"    : { van : 0, lvl : 24 },
        "Surprise"      : { van : 0, lvl : 28 },
        "Weapon"        : { van : 0, lvl : 28 },
        "Hunter"        : { van : 0, lvl : 30 },
        "Player"        : { van : 0, lvl : 30 },
        "Venuz"         : { van : 0, lvl : 30 },
        "LevelChunk"    : { van : 0, lvl : 34 },
        "Portal"        : { van : 0, lvl : 34 },

         /// Vans ///
        "GruntDrop"     : { van : 1, lvl :  3 },
        "AmmoDrop"      : { van : 1, lvl :  5 },
        "BigSurprise"   : { van : 1, lvl :  5 },
        "Giant"         : { van : 1, lvl :  8 },
        "Laser"         : { van : 1, lvl :  8 },
        "Cake"          : { van : 1, lvl : 10 },
        "Portals"       : { van : 1, lvl : 12 },
        "Tank"          : { van : 1, lvl : 12 }, // A gift from blaac
        "Captain"       : { van : 1, lvl : 50 }
    }

#define step
    global.path_queue = 1; // 1 player allies can pathfind per frame

    for(var i = 0; i < maxp; i++) if(button_pressed(i, "pick")){
         // Exit Car:
        with(instances_matching(instances_named(CustomHitme, "VenuzCar"), "index", i)){
            with(player_find(index)){
                visible = 1;
                mask_index = other.index_mask;
                motion_add(point_direction(x, y, mouse_x[index], mouse_y[index]), 1);
                if(other.drive > 0) roll = 1;
            }
            drive = 0;
            open = 1;
        }
    }


#define Ally_create
    ammo = 3 + (2 * GameCont.loops);

#define Ally_spawn
    if(ammo-- > 0){
        alarm0 = 3; // 0.10 Seconds
        sprite_index = spr_loop;

        with(instance_create(x, y, Ally)){ // I love how they line up it's very good
            speed = 4;
            direction = instance_dir(x, y, Player);
            spr_idle = sprAllyIdle;
            creator = instance_nearest(x, y, Player);
        }
    }

     // Close:
    else{
        image_index = 0;
        sprite_index = spr_clos;
    }


#define Chest_spawn
    sound_play(sndChest);
    sound_play(sndRogueCanister);
    sound_play_pitch(sndSnowBotThrow, 1.2);
    if(elite) obj_create(x, y, "IDPDBigChest");
    else{
        var o = choose(IDPDChest, "IDPDWeaponChest", "IDPDHealthChest");
        if(is_string(o)) obj_create(x, y, o);
        else instance_create(x, y, o);
    }
    depth = 0;


#define Explosion_create
    spr_chrg = sprLaserCharge;
    spr_effx = spr_chrg;
    sound_play_pitch(sndIDPDNadeLoad, 0.8);

#define Explosion_spawn
    view_shake_at(x, y, 20);
    sound_play_pitch(sndIDPDNadeExplo, (elite ? 0.8 : 1));
    with(instance_create(x, y, PopoExplosion)){
        if(!other.elite){
            sprite_index = sprRogueExplosion;
            mask_index = mskExplosion;
        }
    }


#define Grenade_spawn
    view_shake_at(x, y, 5);
    sound_play(sndGrenade);
    with(instance_create(x, y, PopoNade)){
        speed = 10;
        direction = instance_dir(x, y, Player) + orandom(30);
        image_angle = direction;
    }
    depth = 1;


#define GruntTrain_create
    ammo = 4 + GameCont.loops;

#define GruntTrain_spawn
     // Grunt:
    if(ammo-- > 0){
        alarm0 = 5;
        sprite_index = spr_loop;
        with(instance_create(x, y, (freak ? PopoFreak : Grunt))){
            speed = 4;
            direction = instance_dir(x, y, Player);
        }
    }

     // Close:
    else{
        image_index = 0;
        sprite_index = spr_clos;
    }


#define Hunter_spawn
    sound_play(sndLilHunterDeath);
    instance_create(x, y, LilHunterDie);


#define LevelChunk_spawn
    var _x = floor_ext(x, 32) - 16,
        _y = floor_ext(y, 32) - 16,
        _dir = irandom(3) * 90,
        _goalMax = 10 + (2 * GameCont.loops),
        _goal = _goalMax,
        f = [],
        _area = {
            "0" : {
                e : (freak ? [PopoFreak] : [Grunt, Grunt, Inspector, EliteShielder]),
                p : [NightCactus, BonePileNight]
                },

            "1" : {
                e : [Bandit, Bandit, Scorpion, Maggot, BigMaggot, MaggotSpawn],
                p : [Cactus, BonePile, Barrel],
                b : BanditBoss
                },

            "2" : {
                e : [Rat, Rat, Ratking, MeleeFake, Exploder, Gator],
                p : [Pipe, ToxicBarrel],
                b : FrogQueen
                },

            "3" : {
                e : [Car, Raven, Sniper, Salamander, MeleeFake],
                p : [Tires, Car],
                b : ScrapBoss
                },

            "4" : {
                e : [Spider, LaserCrystal],
                p : [CrystalProp, Cocoon],
                b : HyperCrystal
                },

            "5" : {
                e : [SnowBot, Wolf, SnowTank],
                p : [Hydrant, StreetLight, SodaMachine],
                b : LilHunter
                },

            "6" : {
                e : [Freak, Freak, ExploFreak, RhinoFreak, Necromancer, Turret],
                p : [Terminal, Server, Tube, MutantTube],
                b : TechnoMancer
                },

            "7" : {
                e : [Guardian, Guardian, ExploGuardian, ExploGuardian, DogGuardian],
                p : [SmallGenerator, Pillar],
                b : EnemyHorror
                },

            "100" : {
                e : [Crown, Rad, CrownGuardian],
                p : [Torch]
                },

            "101" : {
                e : [BoneFish, BoneFish, Crab],
                p : [WaterPlant, OasisBarrel, WaterMine, LightBeam],
                b : OasisBoss
                },

            "102" : {
                e : [PizzaBox, Rat, Turtle, Turtle, Turtle, Turtle],
                p : [PizzaBox]
                },

            "103" : {
                e : [Molefish, Molesarge, FireBaller, SuperFireBaller, Jock],
                p : [MoneyPile, YVStatue, GoldBarrel]
                },

            "104" : {
                e : [InvSpider, InvSpider, InvCrystal],
                p : [InvCrystal]
                },

            "105" : {
                e : [JungleBandit, JungleAssassinHide, JungleFly],
                p : [Bush]
                },

            "106" : {
                e : (elite ? [EliteGrunt, EliteGrunt, EliteInspector, EliteShielder] : [Grunt, Grunt, Inspector, Shielder]),
                p : [PlantPot]
                }
        },
        a = lq_get_key(_area, irandom(lq_size(_area) - 1)),
        t = lq_get(_area, a),
        _enemy = t.e,
        _prop = t.p;

    var w = instance_nearest(x, y, Wall);
    if(instance_exists(w)) direction = round_ext(point_direction(x, y, w.x, w.y), 90);

    sound_play(sndWallBreak);
    sound_play(sndExplosionL);

     // Make Floors:
    while(_goal > 0){
        with(Floor) if(point_in_rectangle(x, y, _x, _y, _x + 16, _y + 16)) instance_destroy();

        f[array_length(f)] = instance_create(_x, _y, Floor);
        with(f[array_length(f) - 1]){
            view_shake_at(x, y, 10);

            if(random(7) < 1) styleb = 1;

             // Break Props:
            if(place_meeting(x, y, prop)) with(prop){
                if(place_meeting(x, y, other)) instance_delete(id);
            }

             // Change Details:
            if(place_meeting(x, y, Detail)) with(Detail){
                if(place_meeting(x, y, other)){
                    sprite_index = asset_get_index("sprDetail" + a);
                }
            }

             // Delete Walls:
            if(place_meeting(x, y, Wall)) with(Wall){
                if(place_meeting(x, y, Bones)) with(Bones){
                    if(place_meeting(x, y, other)) instance_destroy();
                }
                if(place_meeting(x, y, TopPot)) with(TopPot){
                    if(place_meeting(x, y, other)) instance_destroy();
                }
                if(place_meeting(x, y, other)) instance_destroy();
            }
        }
        _goal--;

        _dir += choose(0, 90, -90, 180);
        _x += lengthdir_x(32, _dir);
        _y += lengthdir_y(32, _dir);
    }

     // Finish Up:
    var _bossSpawned = 0;
    with(f) if(instance_exists(self)){
        repeat(5) with(instance_create(x + random(32), y + random(32), choose(Dust, Smoke))){
            speed++;
            if(random(2) < 1){
                gravity = -0.1;
                depth = -7;
            }
        }

         // Spawn Enemies + Props:
        if(random(10) < 1){
            instance_create(x + 16, y + 16, _enemy[irandom(array_length(_enemy) - 1)]);
        }
        if(random(5 + (GameCont.loops / 5)) < 1){
            instance_create(x + 16, y + 16, _prop[irandom(array_length(_prop) - 1)]);
        }
        if(!_bossSpawned && random(GameCont.loops) > 1 && random(_goalMax) < 1){
            _bossSpawned = 1;
            instance_create(x + 16, y + 16, lq_defget(t, "b", Mimic));
        }

         // Sprite-ify:
        var b = asset_get_index("sprFloor" + a + "B");
        if(styleb && sprite_exists(b)){
            sprite_index = b
            if(a == "4" || a == "104") traction = 2;
            else if(a == "5") traction = 0.1;
        }
        else sprite_index = asset_get_index("sprFloor" + a);

         // Surround w/ Walls:
        for(var _ox = -16; _ox <= 32; _ox += 16){
            for(var _oy = -16; _oy <= 32; _oy += 16){
                var _x = x + _ox,
                    _y = y + _oy;

                if(!position_meeting(_x, _y, Floor)){
                    var _wall = instance_create(_x, _y, Wall);
                    with(_wall){
                        sprite_index = asset_get_index("sprWall" + a + "Bot");;
                        topspr = asset_get_index("sprWall" + a + "Top");;
                        outspr = asset_get_index("sprWall" + a + "Out");;
                    }
                    f[array_length(f)] = _wall;

                    for(var __ox = -16; __ox <= 16; __ox += 16){
                        for(var __oy = -16; __oy <= 16; __oy += 16){
                            if(!position_meeting(_x + __ox, _y + __oy, TopSmall) && !position_meeting(_x + __ox, _y + __oy, Floor) && !position_meeting(_x + __ox, _y + __oy, Wall)){
                                with(instance_create(_x + __ox, _y + __oy, TopSmall)){
                                    sprite_index = asset_get_index("sprWall" + a + "Trans");
                                }
                            }
                        }
                    }
                }
            }
        }
    }

     // Draw Impact:
    script_bind_draw(LevelChunk_impactdraw, -9, f);

#define LevelChunk_impactdraw(_floors)
    if(image_alpha > 0.1){
        image_alpha *= 2/3;
        y -= 2;

        d3d_set_fog(1, c_aqua, 0, 0);
        with(_floors) if(instance_exists(self)){
            draw_sprite_ext(sprite_index, image_index, x, y + other.y, image_xscale, image_yscale, image_angle, image_blend, image_alpha * other.image_alpha);
        }
        d3d_set_fog(0, 0, 0, 0);
    }
    else instance_destroy();


#define Portal_create
    my_player = noone;
    my_player_mask = mskNone;
    portal_time = 0;

#define Portal_spawn
     // Initial Spawn:
    if(!instance_exists(my_player)){
        portal_time = 30;
        sprite_index = spr_loop;
        image_index = 0;
    
         // Effects:
        repeat(3) with(instance_create(x, y, PortalL)){
            motion_add(random(360), 2);
            depth = 0;
        }
        sound_play(sndPortalFlyby4);
        sound_play((GameCont.area == 101) ? sndOasisPortal : sndPortalAppear);
    }

     // Release Player:
    else{
        with(projectile) if(distance_to_point(other.x, other.y) < 96) instance_destroy();
        with(my_player){
            visible = 1;
            x = other.x;
            y = other.y;
            xprevious = x;
            yprevious = y;
            mask_index = other.my_player_mask;
            sound_play(snd_wrld);
            speed = maxspeed;
        }
    }

#define Portal_step
    if(portal_time > 0){
         // Pull Player:
        var _pullInst = (instance_exists(my_player) ? my_player : Player),
            _pullDis = 64;

        with(_pullInst) if(point_distance(x, y, other.x, other.y) < _pullDis){
            var _dis = 2.5 * current_time_scale,
                _dir = point_direction(x, y, other.x, other.y);

            if(point_distance(x, y, other.x, other.y) < _pullDis / 2){
                sprite_index = spr_hurt;
                image_index = 1;
                _dis *= 2;
            }

            var _x = x + lengthdir_x(_dis, _dir),
                _y = y + lengthdir_y(_dis, _dir);

            if(place_free(_x, y)) x = _x;
            if(place_free(x, _y)) y = _y;
        }

        if(instance_exists(my_player)){
             // Not Hittable:
            with(my_player){
                angle += 30 * right * current_time_scale;
                if(mask_index != mskNone){
                    other.my_player_mask = mask_index;
                    mask_index = mskNone;
                }
            }

            portal_time -= current_time_scale;

             // Portal Somewhere:
            if(portal_time <= 0){
                 // Reset:
                sprite_index = spr_strt;
                image_index = 0;
                sound_play(snd_warn);
                alarm0 = 43;
                clear = 1;

                 // Teleport Randomly:
                var _tp = (instance_exists(chestprop) ? chestprop : (instance_exists(RadChest) ? RadChest : (instance_exists(Floor) ? Floor : noone)));
                with(instance_random(_tp)){
                    other.x = x - sprite_xoffset + (sprite_width / 2) + orandom(4);
                    other.y = y - sprite_yoffset + (sprite_height / 2) + orandom(4);
                }
                with(my_player){
                    angle = 0;
                    x = other.x;
                    y = other.y;
                    xprevious = x;
                    yprevious = y;
                }
            }

             // Suck in Instance:
            else if(portal_time <= 12) with(my_player) if(visible){
                visible = 0;
                with(other){
                    sprite_index = spr_clos;
                    image_index = 0;
                }
            }
        }
        else if(place_meeting(x, y, _pullInst)){
            my_player = instance_nearest(x, y, _pullInst);
        }
    }

     // Push Away Enemies:
    if(instance_exists(my_player)) with(enemy){
        if(distance_to_point(other.x, other.y) < 48){
            motion_add(point_direction(other.x, other.y, x, y), 1);
        }
    }


#define Projectile_create
    spr_effx = sprBlueFlameDisappear;
    ammo = 5;

#define Projectile_spawn
    sound_play(sndGruntFire);

     // Slug:
    if(elite){
        sound_play(sndSlugger);
        with(instance_create(x, y, PopoSlug)){
            speed = 16;
            direction = instance_dir(x, y, Player) + orandom(5);
            image_angle = direction;
            team = 3;
        }
    }

     // Bullets:
    else{
        if(ammo-- > 0){
            alarm0 = 2; // 0.07 Seconds
            sprite_index = spr_loop;

            with(instance_create(x, y, IDPDBullet)){
                speed = 8;
                direction = instance_dir(x, y, Player) + orandom(10)
                image_angle = direction;
                team = 3;
            }
        }

         // Close:
        else{
            sprite_index = spr_clos;
            image_index = 0;
        }
    }


#define Player_create
    spr_effx = -1;
    spr_chrg = sprVoid;
    spr_open = global.sprPortalOpen;

#define Player_spawn
    PlayerAlly_create(x, y, elite);
    repeat(5) with(instance_create(x, y, PortalL)){
        motion_add(random(360), 2);
        depth = 0;
    }

#define Player_step
     // Custom Charge Particles:
    if(sprite_index == spr_chrg && current_frame_active){
        with(instance_create(x + orandom(24), y + orandom(24), choose(PortalL, PortalL, Dust))){
            motion_add(random(360), 1 + random(1));
        }
    }

#define Pyro_spawn
    with(obj_create(x + random_range(-2, 2), y + random_range(-2, 2), "PyroIDPD")){
        speed = 4;
        direction = instance_dir(x, y, Player);
    }

#define Shield_spawn
    with(instance_create(x, y, PopoShield)){
        image_speed = 1.5;
        creator = other;
        if(other.elite) sprite_index = sprEliteShielderShieldAppear;
    }


#define Surprise_spawn
    var _obj = { "0":CrownGuardian, "1":BoneFish,    "2":Turtle,      "3":Jock,     "4":InvSpider,      "5":JungleAssassinHide, "6":PopoFreak, "7":EnemyHorror,
                                    "101":RadMaggot, "102":SuperFrog, "103":Sniper, "104":LaserCrystal, "105":SnowBot,          "106":Turret },
        o = lq_exists(_obj, string(GameCont.area))
                ? lq_get(_obj, string(GameCont.area))
                : lq_get_value(_obj, irandom(lq_size(_obj) - 1));

    with(instance_create(x, y, o)){
        x = xstart;
        y = ystart;
        depth = -2;
        if(o == SnowBot) instance_create(x, y, Car);
    }

     // Enhance surprise:
    sound_play(asset_get_index(`sndConfetti${1 + irandom(6)}`));
    repeat(20) with(instance_create(x, y, Confetti)){
        motion_add(random(360), 1 + random(3));
        depth = choose(-2, -3);
    }


#define Turret_spawn
    obj_create(x, y, "IDPDTurret");

#define Venuz_create
    spr_effx = sprCaveSparkle;
    spr_chrg = sprThrowHit;
    spr_open = global.sprPortalOpen;

    snd_warn = mus103;
    snd_spwn = sndVenuz;

    alarm0 = 60;

#define Venuz_spawn
    if(GameCont.area != 103) sound_stop(snd_warn);
    VenuzCar_create(x, y, elite);

#define Weapon_create
    sound_play_pitch(sndSwapEnergy, 0.75);
    spr_chrg = sprGunGunFire;

#define Weapon_spawn
    sound_play(sndGunGun);
    with(instance_create(x, y, ThrownWep)){
        speed = 16;
        direction = instance_dir(x, y, hitme) + orandom(10);
        wep = irandom(127);
        sprite_index = weapon_get_sprite(wep);
    }

#define Weapon_step
    if(sprite_index == spr_chrg && image_index > 4){
        instance_create(x, y, LaserBrain);
        image_index = 0;
    }




#define AmmoDrop_spawn
    sound_play(sndChest);
    sound_play_pitch(sndSnowBotThrow, 1.2);
    instance_create(x, y, VenuzAmmoSpawn);
    depth = 1;


#define BigSurprise_spawn
    var _obj = { "1":GoldScorpion, "2":BuffGator, "3":Salamander,        "4":LightningCrystal,  "5":GoldSnowTank, "6":RhinoFreak,  "7":CrownGuardian,
                 "101":OasisBoss,  "102":Turtle,  "103":SuperFireBaller, "104":InvLaserCrystal, "105":JungleFly,  "106":PopoFreak },
        o = lq_exists(_obj, string(GameCont.area))
                ? lq_get(_obj, string(GameCont.area))
                : lq_get_value(_obj, irandom(lq_size(_obj) - 1));

    repeat(2 + GameCont.loops) instance_create(x, y, o);

     // Enhance surprise:
    sound_play(asset_get_index(`sndConfetti${1 + irandom(6)}`));
    repeat(50) with(instance_create(x + orandom(8), y + orandom(8), Confetti)){
        motion_add(random(360), 2 + random(4));
        depth = choose(-2, -3);
    }
    depth = -1;


#define Cake_spawn
    sound_play(asset_get_index(`sndConfetti${1 + irandom(6)}`));
    obj_create(x, y, "RadCake");
    var _ang = random(360);
    for(var a = _ang; a < _ang + 360; a += (360 / 8)){
        var d = random(12);
        with(instance_create(x + lengthdir_x(d, a), y + lengthdir_y(d, a), choose(Rad, Rad, BigRad))){
            motion_add(a + orandom(20), random(4));
            depth = -1;
        }
    }
    depth = -1;


#define Captain_create
     // Warn:
    sound_play_gun(sndLastMelee, 0.2, -0.5);

#define Captain_spawn
    with(instance_create(x, y, Last)){
        maxhealth /= 2;
        my_health = maxhealth;
    }


#define Giant_spawn
    obj_create(x, y - 4, "GiantBandit");
    depth = -1;


#define GruntDrop_spawn
    var o = (freak ? PopoFreak : Grunt);
    repeat(10 + (2 * GameCont.loops)) instance_create(x, y, o);
    depth = -1;


#define Laser_create
    my_laser = noone;

     // Warn:
    sound_play_gun(sndIDPDNadeAlmost, 0, 0); // Quiet Sounds
    sound_play_pitchvol(sndIDPDNadeAlmost, 0.4 + random(0.1), 5);

#define Laser_spawn
    snd_spwn = -1;

     // Fire:
    my_laser = obj_create(x, y, "PopoLaser");
    with(my_laser){
        direction = instance_dir(x, y, Player);
        image_angle = direction;
        creator = other;
    }

     // Visual/Sound:
    sprite_index = spr_loop;
    sound_play_pitchvol(sndIDPDNadeLoad, 1.2 + random(0.2), 2);
    depth = -1;

#define Laser_step
     // Close:
    if(sprite_index != spr_clos){
        if(my_laser != noone && !instance_exists(my_laser)){
            sprite_index = spr_clos;
            image_index = 0;
        }
    }


#define Portals_spawn
    if(sprite_index != spr_loop){
        sprite_index = spr_loop;
        alarm0 = 43;

        for(var a = 0; a < 360; a += (360 / 3)){
            with(IDPDPortal_create(x + lengthdir_x(4, a), y + lengthdir_y(4, a), elite, freak, 0)){
                direction = a;
                speed = 2;
            }
        }
        depth = -1;
    }
    else sprite_index = spr_clos;


#define Tank_spawn
    obj_create(x, y, "IDPDTank");
    depth = -1;




#define obj_create(_x, _y, _obj)
    switch(_obj){
        case "PopoLaser":
            sound_play_gun(sndPlasmaHuge, 0.5, -1);
            sound_play_pitchvol(sndLaserCannonCharge, 0.5 + random(0.1), 1.25);
            with(instance_create(_x, _y, CustomProjectile)){
                name = _obj;

                 // Visual:
                sprite_index = sprPopoPlasma;
                spr_mid = global.sprPopoLaserMid;
                spr_bgn = global.sprPopoLaserBgn;
                spr_end = global.sprPopoLaserEnd;
                mask_index = mskSuperFlakBullet;
                image_speed = 0;
                depth = -3;
                hitid = [spr_bgn, "PORTAL BEAM"];

                 // Sound:
                snd_fire = sndVanPortal;

                 // Vars:
                typ = 0;
                team = -1;
                force = 8;
                damage = 4;
                active = 0;
                impact = 1;
                scorch = 1;
                target = Player;
                creator = noone;
                direction = random(360);
                image_angle = direction;
                rotspeed = random_range(0.5, 1) * choose(-1, 1);
                charge_add = 0.06;
                decay = 0.9;

                alarm0 = 30;

                on_step = PopoLaser_step;
                on_hit  = PopoLaser_hit;
                on_wall = PopoLaser_wall;
                on_draw = PopoLaser_draw;
        
                return id;
            }

        case "GiantBandit": // small brain brings the pain
            sound_play_pitchvol(sndBallMamaTaunt, 0.6, 3);
            sound_play_pitch(sndBigBanditIntro, 0.7 + random(0.1));
            with(instance_create(_x, _y, CustomEnemy)){
                name = _obj;

                 // Visual:
                spr_idle = global.sprGiantIdle;
                spr_walk = global.sprGiantWalk;
                spr_hurt = global.sprGiantHurt;
                spr_dead = global.sprGiantDead;
                spr_shadow = shd96;
                //spr_shadow_y = 2;
                gunspr = global.sprGiantRifle;
                hitid = [spr_idle, "GIANT"];
                depth = -9;

                 // Sound:
                snd_hurt = sndBanditHit;
                snd_dead = sndBigBanditDie;
                snd_mele = sndBigBanditMeleeHit;

                 // Vars:
                mask_index = mskScrapBoss;
                maxhealth = 220;
                raddrop = 35;
                size = 5;
                team = 1;
                walk = 0;
                maxspeed = 2.5;
                addspeed = 0.8;
                direction = random(360);
                gunangle = direction;
                meleedamage = 20;
                canmelee = 0;
                charge = 0;

                z = 0;
                zspeed = 0;
                zgravity = 1;

                alarm1 = 30 + random(60);

                on_step  = GiantBandit_step;
                on_draw  = GiantBandit_draw;
                on_hurt  = GiantBandit_hurt;
                on_death = GiantBandit_death;

                return id;
            }

        case "GiantBanditBullet":
            with(instance_create(_x, _y, CustomProjectile)){
                name = _obj;

                 // Visual:
                sprite_index = global.sprGiantBullet;
                mask_index = mskSuperFlakBullet;
                depth = -2;

                 // Vars:
                damage = 10;
                force = 20;
                typ = 1;
                creator = noone;
                shrink = 0;

                on_step = GiantBanditBullet_step;
                on_hit  = GiantBanditBullet_hit;
                on_wall = GiantBanditBullet_wall;
                on_anim = GiantBanditBullet_anim;
                on_destroy = GiantBanditBullet_destroy;

                return id;
            }

        case "RadCake":
            with(instance_create(_x, _y, CustomHitme)){
                name = _obj;

                 // Visual:
                sprite_index = sprCake;
				spr_shadow = shd24;
                image_xscale = choose(-1, 1);
                image_speed = 0.4;

				 // Sounds:
				snd_hurt = sndFrogEggHurt;
				snd_dead = sndFrogEggDead;

                 // Vars:
				mask_index = mskRhinoFreak;
                maxhealth = 50;
                my_health = maxhealth;
				raddrop = 25;
				depth = -2;
				size = 3;
				team = 0;
				creator = noone;
				drops = 20;

                on_step = RadCake_step;
                on_end_step = RadCake_end_step;
                on_draw = RadCake_draw;
                on_hurt = RadCake_hurt;
                on_destroy = RadCake_destroy;

                return id;
            }

        case "CustomChest":
            with(instance_create(_x, _y, chestprop)){
                name = _obj;

                 // Visual:
                sprite_index = sprAmmoChest;
                spr_open = sprAmmoChestOpen;

                 // Sound:
                snd_open = sndAmmoChest;

                on_step = script_bind_step(CustomChest_step, 0, id);
                on_open = ["", "", ""];

                return id;
            }

        case "IDPDWeaponChest":
            with(obj_create(_x, _y, "CustomChest")){
                 // Visual:
                sprite_index = global.sprIDPDWeaponChest;
                spr_open = global.sprIDPDWeaponChestOpen;

                 // Sound:
                snd_open = sndWeaponChest;

                on_open = script_ref_create(IDPDWeaponChest_open);

                return id;
            }

        case "IDPDHealthChest":
            with(obj_create(_x, _y, "CustomChest")){
                 // Visual:
                sprite_index = global.sprIDPDHealthChest;
                spr_open = global.sprIDPDHealthChestOpen;

                 // Sound:
                snd_open = sndHealthChest;

                on_open = script_ref_create(IDPDHealthChest_open);

                return id;
            }

        case "IDPDBigChest":
            with(obj_create(_x, _y, "CustomChest")){
                 // Visual:
                sprite_index = global.sprIDPDBigChest;
                spr_open = global.sprIDPDBigChestOpen;
                spr_shadow = shd32;

                on_open = script_ref_create(IDPDBigChest_open);

                return id;
            }

        case "IDPDTurret":
            sound_play_pitch(sndTurretSpawn, 0.6);
            with(instance_create(_x, _y, CustomEnemy)){
                name = _obj;

                 // Visual:
                spr_spwn = global.sprIDPDTurretSpwn;
                spr_idle = global.sprIDPDTurretIdle;
                spr_walk = spr_idle;
                spr_hurt = global.sprIDPDTurretHurt;
                spr_dead = global.sprIDPDTurretDead;
                spr_fire = global.sprIDPDTurretFire;
                spr_shadow = shd24;
                spr_shadow_y = -1;
                sprite_index = spr_spwn;
                hitid = [spr_idle, "IDPD Turret"];
                depth = -2;

                 // Sound:
                snd_hurt = sndTurretHurt;
                snd_dead = sndTurretDead;

                 // Vars:
                mask_index = mskScorpion;
                maxhealth = 40;
                gunangle = random(360);
                team = 3;
                size = 3;
                ammo = 0;

                alarm1 = ceil((image_number + sprite_get_number(spr_idle)) / image_speed) + 1;

                on_step     = IDPDTurret_step;
                on_draw     = IDPDTurret_draw;
                on_hurt     = IDPDTurret_hurt;
                on_death    = IDPDTurret_death;
                on_end_step = IDPDTurret_end_step;

                return id;
            }

        case "IDPDTank":
            with(instance_create(_x, _y, CustomEnemy)){
                name = _obj;

                 // Visual:
                spr_spwn = global.sprTankSpwn;
                spr_idle = global.sprTankIdle;
                spr_walk = global.sprTankWalk;
                spr_hurt = global.sprTankHurt;
                spr_dead = global.sprTankDead;
                spr_chrg = global.sprTankChrg;
                spr_fire = global.sprTankFire;
                spr_fend = global.sprTankFEnd; // Fire End
                spr_shadow = shd64;
                spr_shadow_y = 16;
                sprite_index = spr_spwn;
                hitid = [spr_idle, "IDPD Tank"];
                depth = -2;

                 // Sound:
                snd_hurt = sndNothingHurtHigh; // sndStreetLightBreak
                snd_dead = sndLastNotifyDeath;

                 // Vars:
                mask_index = mskFrogQueen;
                maxhealth = 280;
                team = 3;
                size = 4;
                walk = 0;
                maxspeed = 1;
                addspeed = 0.8;
                direction = random(360);
                gunangle = direction;
                my_laser = noone;
                eat_wait = 0;
                corpse = 0;

                 // Claw Arm:
                claw = {
                    segment : [],
                    extend  : 0,
                    targ_x  : x,
                    targ_y  : y,
                    draw_x  : x,
                    draw_y  : y,
                    scale   : 0,
                    open    : 0,
                    grab    : noone,
                    door    : 0
                }
                var _armOffset = [16, 10, 10];
                for(var i = 0; i < array_length(_armOffset); i++){
                    claw.segment[i] = {
                        angle   : 0,
                        scale   : 0,
                        length  : _armOffset[i],
                        draw_x  : 0,
                        draw_y  : 0
                    }
                }

                alarm1 = ceil(image_number / image_speed) + 1;

                on_step     = IDPDTank_step;
                on_draw     = IDPDTank_draw;
                on_hurt     = IDPDTank_hurt;
                on_death    = IDPDTank_death;

                return id;
            }

        case "IDPDTankExplode":
            repeat(30){
                with(instance_create(_x, _y, Dust)) motion_add(random(360), 8);
                with(instance_create(_x, _y, Smoke)) motion_add(random(360), 3);
            }
            with(instance_create(_x, _y, CustomObject)){
                name = _obj;

                 // Visual:
                sprite_index = global.sprTankExpl;
                spr_dead = global.sprTankDead;
                spr_shadow = shd64;
                spr_shadow_x = 0;
                spr_shadow_y = 16;
                depth = -2;
                hitid = [sprite_index, "IDPD Tank"];
                image_speed = 0.4;

                 // Vars:
                mask_index = mskFrogQueen;
                size = 4;
                explo = 3;
                creator = noone;

                alarm0 = 15;

                on_step = IDPDTankExplode_step;

                return id;
            }

        case "PyroIDPD":
            with(instance_create(_x, _y, CustomEnemy)){
                name = _obj;

                 // Visual:
                spr_idle = global.sprPyroIdle;
                spr_walk = global.sprPyroWalk;
                spr_hurt = global.sprPyroHurt;
                spr_dead = global.sprPyroDead;
                gunspr = global.sprPyroWeap;
                spr_shadow = shd24;
                hitid = [spr_idle, "Pyro"];
                depth = -2;

				 // Sounds:
				male = irandom(1);
				var m = (male ? "M" : "F");
				snd_hurt = asset_get_index("sndInspectorHurt" + m);
				snd_dead = asset_get_index("sndGruntDead" + m);
				snd_nade = asset_get_index("sndGruntThrowNade" + m);
				sound_play_pitch(asset_get_index("sndGruntEnter" + m), 0.75);

                 // Vars:
                mask_index = mskFreak;
                maxhealth = 10;
                team = 3;
                size = 1;
                walk = 0;
                maxspeed = 3;
                addspeed = 0.5;
                direction = random(360);
                gunangle = direction;
                grenades = 4;
                freeze = 0;
                sweep = 5;
                ammo = 0;

                alarm1 = 30;

                on_step     = PyroIDPD_step;
                on_draw     = PyroIDPD_draw;
                on_hurt     = PyroIDPD_hurt;
                on_death    = PyroIDPD_death;

                return id;
            }

        case "PyroBot":
            with(instance_create(_x, _y, CustomObject)){
                name = _obj;

                 // Visual:
                spr_spwn = global.sprPyroBotSpwn;
                spr_idle = global.sprPyroBotIdle;
                spr_walk = global.sprPyroBotWalk;
                spr_chrg = global.sprPyroBotChrg;
                spr_fire = global.sprPyroBotFire;
                spr_blnk = global.sprPyroBotBlnk;
                spr_shadow = shd16;
                spr_shadow_x = 0;
                spr_shadow_y = 3;
                hitid = [global.sprPyroIdle, "Pyro"];
                sprite_index = spr_spwn;
                image_speed = 0.4;

                 // Vars:
                mask_index = mskAlly;
                typ = 1;
                team = 3;
                walk = 0;
                addspeed = 0.8;
                maxspeed = 2;
                friction = 0.4;
                creator = noone;
                stick = noone;
                stick_x = 0;
                stick_y = 0;
                corpses = [];
                target = noone;
                right = choose(-1, 1);

                alarm1 = 30;

                on_step     = PyroBot_step;
                script_bind_end_step(PyroBot_end_step, 0, id);
                on_draw     = PyroBot_draw;
                on_destroy  = PyroBot_destroy;

                return id;
            }

        case "PyroFreak":
            with(instance_create(_x, _y, CustomEnemy)){
                name = _obj;

                 // Visual:
                sprite_index = sprBanditDead;
                spr_shadow = shd24;
                depth = -2;

                 // Sound:
                snd_hurt = sndFreakPopoHurt;
                snd_dead = sndIDPDNadeExplo;

                 // Vars:
                mask_index = mskBandit;
                maxhealth = 8;
                team = 1;
                size = 1;
                walk = 0;
                addspeed = 0.5;
                maxspeed = 4;
                meleedamage = 3;
                direction = random(360);
                creator = noone;

                alarm0 = 450;
                alarm1 = 20;

                on_step     = PyroFreak_step;
                on_draw     = PyroFreak_draw;
                on_hurt     = PyroFreak_hurt;
                on_death    = PyroFreak_death;

                return id;
            }

        case "PlayerAlly":
            return PlayerAlly_create(_x, _y, irandom(1));

        case "VenuzCar":
            return VenuzCar_create(_x, _y, irandom(1));

        default:
            return ["PopoLaser", "GiantBandit", "GiantBanditBullet", "RadCake", "CustomChest", "IDPDWeaponChest", "IDPDHealthChest", "IDPDBigChest", "IDPDTurret", "IDPDTank", "IDPDTankExplode", "PyroIDPD", "PyroBot", "PyroFreak", "PlayerAlly", "VenuzCar"];
    }

#define PopoLaser_step
     // Fire:
    if(scrAlarm(0)){
        active = 1;
        sprite_index = spr_mid;
        mask_index = mskLaser;
        sound_play_pitch(sndLaserUpg, 0.5);
        sound_play(snd_fire);
        view_shake_at(x, y, 50);

         // Turn Towards Nearest Player:
        if(instance_exists(target)){
            var n = instance_nearest(x, y, target);
            rotspeed = abs(rotspeed) * sign(angle_difference(point_direction(x, y, n.x, n.y), direction));
        }
    }

    if(active){
         // Turn:
        direction += rotspeed * current_time_scale;
        image_angle = direction;

         // Size Decay:
        image_yscale += ((image_yscale * decay) - image_yscale) * current_time_scale;

         // Hitscan (Not the usual way, but it's fast):
        image_xscale = 1;
        var _sx = xstart,
            _sy = ystart,
            _lx = _sx,
            _ly = _ly,
            _dir = direction,
            _md = 1000, // Max Distance
            d = _md,    // Distance
            m = 0;      // Minor hitscan increment distance

        while(d > 0){
             // Major Hitscan Mode (Start at max, go back until no collision line):
            if(m <= 0){
                _lx = _sx + lengthdir_x(d, _dir);
                _ly = _sy + lengthdir_y(d, _dir);
                d -= sqrt(_md);

                if(!collision_line(_sx, _sy, _lx, _ly, Wall, 0, 0)){
                    var _enemyHit = 0;
                    if(collision_line(_sx, _sy, _lx, _ly, hitme, 0, 0)){
                        with(instances_matching_gt(instances_matching_ne(hitme, "team", team), "size", 1)){
                            if(collision_line(_sx, _sy, _lx, _ly, id, 0, 0)){
                                _enemyHit = 1;
                                break;
                            }
                        }
                    }

                     // Enter minor hitscan mode:
                    if(!_enemyHit){
                        m = 2;
                        d = sqrt(_md);
                    }
                }
            }

             // Minor Hitscan Mode (Move until collision):
            else{
                var b = 0;
                if(position_meeting(_lx, _ly, Wall)) b = 1;
                else if(position_meeting(_lx, _ly, hitme)){
                    with(instances_matching_gt(instances_matching_ne(hitme, "team", team), "size", 1)){
                        if(position_meeting(_lx, _ly, id)){
                            b = 1;
                            break;
                        }
                    }
                }
                if(b) break;

                _lx += lengthdir_x(m, _dir);
                _ly += lengthdir_y(m, _dir);
                d -= m;
            }
        }
        
        _lx += lengthdir_x(4, _dir);
        _ly += lengthdir_y(4, _dir);

        x = _lx;
        y = _ly;
        xprevious = x;
        yprevious = y;

        var _dis = point_distance(_sx, _sy, _lx, _ly);
        image_xscale = _dis / 2;

         // Projectile Deflection:
        /*if(place_meeting(x, y, projectile)){
            with(instances_matching(instances_matching_ne(projectile, "team", team), "typ", 1, 2)){
                if(place_meeting(x, y, other)){
                    sound_play(sndShielderDeflect);
                    with(instance_create(x, y, Deflect)) image_angle = other.image_angle;
                    if(typ == 1){
                        direction = (other.direction - 90) - (direction - (other.direction + 90));
                        image_angle = direction;
                        team = other.team;
                    }
                    else instance_destroy();
                }
            }
        }*/

         // Impact Explosion:
        if(impact){
            impact = 0;
            sound_play(sndExplosion);
            sound_play(sndIDPDNadeExplo);
            with(instance_create(x, y, PopoExplosion)){
                sprite_index = sprRogueExplosion;
                mask_index = mskExplosion;
                hitid = other.hitid;
                team = other.team;
            }

             // Effects:
            repeat(3){
                with(instance_create(x + orandom(12), y + orandom(12), BlueFlame)){
                    sprite_index = choose(sprBlueFlame, sprBlueFlameBig);
                }
            }
            repeat(20){
                with(instance_create(x, y, Smoke)){
                    motion_add(random(360), 2 + random(3));
                }
                with(instance_create(xstart, ystart, Smoke)){
                    motion_add(random(360), 3 + random(2));
                }
            }
        }

         // Ground Scorching Effect:
        if(scorch){
            scorch = 0;
            for(var a = direction; a < (direction + 360); a += (360 / 5)){
                var l = random(26);

                with(instance_create(xstart + lengthdir_x(l, a), ystart + lengthdir_y(l, a), Scorch)){
                    repeat(2) with(instance_create(x + orandom(16), y + orandom(16), BlueFlame)){
                        sprite_index = choose(sprBlueFlame, sprBlueFlameBig);
                    }
                }
            }
        }

         // Effects:
        if(current_frame_active){
            repeat(2) instance_create(x, y, Smoke);
            var d = random(_dis);
            with(instance_create(xstart + lengthdir_x(d, _dir), ystart + lengthdir_y(d, _dir), IDPDPortalCharge)){
                motion_add(random(360), 2);
                alarm0 = 10;
            }
        }
        sound_play_pitchvol(sndLightningHit, 0.5, 50 / (distance_to_object(Player) + 1));
        with(Player) view_shake[index] = max(view_shake[index], 4);
    
        if(image_yscale < 0.1) instance_destroy();
    }

     // Charging:
    else{
        image_xscale += charge_add * current_time_scale;
        image_yscale = image_xscale;

         // Warning Particles:
        if(current_frame_active){
            repeat(image_xscale) with(instance_create(x, y, IDPDPortalCharge)){
                var o = (24 + random(72)) * other.image_xscale,
                    d = choose(other.direction + orandom(5), random(360));

                x += lengthdir_x(o, d);
                y += lengthdir_y(o, d);

                speed = 3 + random(2);
                direction = d + 180 + orandom(10);
                alarm0 = (distance_to_object(other) / speed) + 1;
            }
        }
    }

#define PopoLaser_hit
    if(projectile_canhit(other)){
        projectile_hit(other, damage, force, direction);
    }

#define PopoLaser_wall
     // Destroy Walls:
    if(image_yscale > 0.5 && current_frame_active) with(other){
        instance_create(x, y, FloorExplo);
        instance_destroy();
    }

#define PopoLaser_draw
     // Laser:
    if(active){
        draw_sprite_ext(spr_bgn, image_index, xstart, ystart, image_yscale, image_yscale, image_angle, image_blend, image_alpha);
        draw_self();
        draw_sprite_ext(spr_end, image_index, x, y, image_yscale, image_yscale, image_angle, image_blend, image_alpha);
    }

     // Charging up:
    else{
         // Wall Hitscan Laser Sight:
        var _sx = x - 1,
            _sy = y - 1,
            _lx = _sx,
            _ly = _ly,
            _dir = direction + (rotspeed * sqr(alarm0 / 10)),
            _md = 1000, // Max Distance
            d = _md,    // Distance
            m = 0;      // Minor hitscan increment distance

        while(d > 0){
             // Major Hitscan Mode (Start at max, go back until no collision line):
            if(m <= 0){
                _lx = _sx + lengthdir_x(d, _dir);
                _ly = _sy + lengthdir_y(d, _dir);
                d -= sqrt(_md);

                 // Enter minor hitscan mode:
                if(!collision_line(_sx, _sy, _lx, _ly, Wall, 0, 0)){
                    m = 2;
                    d = sqrt(_md);
                }
            }
    
             // Minor Hitscan Mode (Move until collision):
            else{
                if(position_meeting(_lx, _ly, Wall)) break;
                _lx += lengthdir_x(m, _dir);
                _ly += lengthdir_y(m, _dir);
                d -= m;
            }
        }

        draw_set_color(c_aqua);
        draw_line_width(_sx, _sy, _lx, _ly, (5 / alarm0));

         // Charge Sphere:
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle + (sign(rotspeed) * sqr(alarm0 / 2)), image_blend, image_alpha);
    }

#define GiantBandit_step
     // Animate:
    if(sprite_index != spr_hurt){
        if(speed <= 0) sprite_index = spr_idle;
        else sprite_index = spr_walk;
    }
    else if(image_index > 2) sprite_index = spr_idle;

     // Walk:
    if(walk > 0){
        walk -= current_time_scale;
        motion_add(direction, addspeed);
    }
    if(speed > maxspeed) speed = maxspeed;

     // Body Slam:
    if(zspeed != 0) z += zspeed * current_time_scale;
    if(z <= 0){
        z = 0;
        if(zspeed < -(zgravity * 2)){
            sprite_index = spr_hurt;
            image_index = 0;
            view_shake_at(x, y, 30);
            sound_play(sndHyperSlugger);
            repeat(12) with(instance_create(x + random_range(-16, 16), y + 32, Dust)){
                motion_add(random(360), 3 + random(2));
            }

             // Impact Area:
            var _area = instance_create(x, y + 16, PortalClear);
            with(_area){
                image_speed = 1;
                image_xscale = 1.5;
                image_yscale = image_xscale;
                image_alpha = 0.25;
                visible = 1;
            }

             // Frickin' BODY SLAM:
            if(zspeed <= -10) projectile_hit_raw(id, 8, snd_hurt);
            with(instances_matching_ne(hitme, "id", id)){
                if(place_meeting(x, y, _area)) with(other){
                    projectile_hit(other, meleedamage, 12, point_direction(x, y, other.x, other.y));
                    sound_play_pitchvol(sndBigBanditMeleeHit, 1 + max(0.5 * (other.my_health / other.maxhealth), -0.5), max(other.size, 1) / 2);
                }
            }

            zspeed *= -0.2;
        }
        else zspeed = 0;
    }
    else{
        speed += friction;
        sprite_index = spr_hurt;
        image_index = 1;
        zspeed -= zgravity * current_time_scale;
    }

     // Charge:
    if(charge){
         // Skippin':
        if(z <= 0) zspeed += 4;
        sprite_index = spr_walk;

         // Break Walls:
        with(instance_create(x, y, PortalClear)){
            image_xscale = 1.4;
            image_yscale = 1.4;
        }

         // Movement:
        if(instance_exists(target)) direction = point_direction(x, y, target.x, target.y);
        speed = (2 * maxspeed);
    }

     // Alarm1 : General
    if(scrAlarm(1)){
        alarm1 = 40 + random(10);

        target = instance_nearest(x, y, Player);
        var t = target;

        if(instance_exists(t)){
            var _tdir = point_direction(x, y, t.x, t.y),
                _tdis = point_distance(x, y, t.x, t.y);

            if(charge){
                charge = 0;
                scrWalk(20 + random(20), _tdir);
            }

            else if((!collision_line(x, y, t.x, t.y, Wall, 0, 0) || random(_tdis) < 64) && _tdis < 256){
                 // Good Distance:
                if(point_distance(t.x, t.y, x, y) > 96){
                     // Shoot Very Large&Big Rifle:
                    if(random(2) < 1){
                        alarm1 = 20 + random(20);
    
                        wkick = 16;
                        motion_add(gunangle + 180, 20);
                        sound_play_pitchvol(sndEnemyFire, 0.5, 1.5);
                        sound_play_pitchvol(sndHeavyMachinegun, 0.8, 1);
                        with(obj_create(x, y, "GiantBanditBullet")){
                            motion_add(other.gunangle + random_range(-10, 10), 5 + random(1));
                            image_angle = direction;
                            if(skill_get(mut_euphoria)) speed *= 0.8;

                            hitid = other.hitid;
                            team = other.team;
                            creator = other;
                        }
                        gunangle = point_direction(x, y, target.x, target.y);
                    }
                    else{
                        scrWalk(20 + random(30), _tdir + random_range(-90, 90));
                        gunangle = _tdir;
                    }
                }
    
                 // Too Close:
                else{
                     // Bandit SMASH:
                    if(random(3) < 1){
                        alarm1 = 60 + random(30);

                        zspeed = 10;
                        motion_add(_tdir, 4);
                        sound_play_pitch(sndBigBanditMelee, 0.8)
                    }

                     // Move Away:
                    else{
                        scrWalk(10 + random(10), _tdir + 180 + random_range(-30, 30));
                        gunangle = _tdir;
                    }
                }
            }

             // Charge Towards Target:
            else if(random(2) < 1){
                alarm1 += random(_tdis / 20);
                charge = true;
            }

             // Facing:
            scrRight(_tdir);
        }
    
         // Move Randomly:
        else{
            charge = 0;
            scrWalk(20 + random(50), random(360));
            scrRight(direction);
            alarm1 = 10 + random(30) + walk;
        }
    }

     // Footsteps cause he big:
    if(sprite_index == spr_walk){
        var _img = floor(image_index);
        if((_img == 2 || _img == 5) && image_index < _img + (image_speed * current_time_scale)){
            if(point_seen(x, y, -1) && !instance_exists(HeavyBullet)){
                sound_play_pitchvol(sndHeavyRevoler, 0.25 + random(0.5), 0.15);
            }
            view_shake_at(x, y, 5);
        }
    }

#define GiantBandit_draw
    var _angOff = right * sqr(min(zspeed, 0));
    y -= z;
    image_angle += _angOff;

    if(gunangle > 180) draw_self_enemy();
    draw_weapon(gunspr, x, y, gunangle, 0, wkick, right, image_blend, image_alpha);
    if(gunangle <= 180) draw_self_enemy();

    y += z;
    image_angle -= _angOff;

#define GiantBandit_hurt(_hitdmg, _hitvel, _hitdir)
    my_health -= _hitdmg;		    // Damage
    motion_add(_hitdir, _hitvel);   // Knockback
    nexthurt = current_frame + 6;   // I-Frames

     // Sound:
    if(point_seen(x, y, -1)){
        sound_play_pitchvol(snd_hurt, 0.5 + random(0.1), 1.5);
    }

     // Hurt Sprite:
    sprite_index = spr_hurt;
    image_index = 0;

#define GiantBandit_death
    view_shake_at(x, y, 30);

     // A disguise the whole time:
    repeat(10) with(instance_create(x + orandom(16), y + 8 + orandom(8), Bandit)){
        scrWalk(10 + random(20), point_direction(other.x, other.y, x, y));
        alarm1 = walk;
    }

     // Pitched Death Sound:
    sound_play_pitchvol(sndHitRock, 0.75, 2);
    sound_play_pitchvol(snd_dead, 0.5 + random(0.1), 1.5);
    snd_dead = -1;

     // Drop some goodies:
    repeat(3) pickup_drop(50, 0);

#define GiantBanditBullet_step
     // Minor Smoke Trail:
    if(current_frame_active && random(5) < 1){
        with(instance_create(x + random_range(-12, 12), y + random_range(-12, 12), Smoke)){
            motion_add(random(360), random(2));
        }
    }

     // Shrinking:
    if(shrink > 0){
        shrink--;
        image_xscale -= 0.15;
        image_yscale = image_xscale;
        if(image_xscale < 0.6) instance_destroy();
    }

#define GiantBanditBullet_hit
     // Particles:
    with(other) with(instance_create(x, y, BulletHit)){
        sprite_index = sprEnemyBulletHit;
        motion_add(random(360), other.size);
    }

    if(projectile_canhit_melee(other)){
        projectile_hit(other, damage, force, direction);
        sound_play_pitchvol(sndHitWall, 0.5, 1.5);
        shrink++;
    }

     // Stick on enemies:
    x -= (hspeed + random(hspeed)) / 2;
    y -= (vspeed + random(vspeed)) / 2;

#define GiantBanditBullet_wall
    shrink++;

     // Particles:
    with(other){
        with(instance_create(x, y, BulletHit)){
            sprite_index = sprEnemyBulletHit;
            motion_add(random(360), 1);
        }
        instance_create(x, y, Smoke);
    }

     // Break Walls:
    with(instance_create(x, y, PortalClear)){
        image_angle = other.image_angle;
        image_xscale = other.image_xscale;
        image_yscale = image_xscale;
    }

#define GiantBanditBullet_anim
    image_speed = 0;
    image_index = image_number - 1;

#define GiantBanditBullet_destroy
    instance_create(x, y, PortalClear);

     // Shrapnel:
    for(var a = direction; a < direction + 360; a += (360 / 3)){
        with(instance_create(x, y, EnemyBullet3)){
            motion_add(a + orandom(10), 8);
            image_angle = direction;
            team = other.team;
            creator = other.creator;
            hitid = other.hitid;
        }
    }

     // Effects:
    view_shake_at(x, y, 10);
    sound_play_pitch(sndFlakExplode, 0.5);
    with(instance_create(x, y, BulletHit)) sprite_index = global.sprGiantBulletHit;
    repeat(10){
        with(instance_create(x, y, Smoke)) motion_add(random(360), 2 + random(2));
    }

#define RadCake_step
     // Manual Eat:
    if(place_meeting(x, y, Player)){
        with(Player) if(place_meeting(x, y, other) && button_pressed(index, "pick")){
            projectile_hit_raw(other, 5, -1);
            instance_create(x, y, HPPickup);
            other.drops -= 2;

             // Player enjoys:
            sound_play_pitch(sndPlayerHit, 0.8 + random(0.2));
            if(other.my_health <= 0) sound_play(sndPlayerDeath)
        }
    }

     // Die:
    if(my_health <= 0){
        if(drops-- > 0){
            sound_play_pitchvol(snd_hurt, 0.8 + random(0.4), 0.6);
            with(instance_create(x, y, HPPickup)){
                motion_add(random(360), 1);
                with(instance_create(x, y, MeleeHitWall)){
                    image_angle = other.direction;
                    image_xscale = 0.5 + random(0.5);
                }
            }
        }
        else instance_destroy();
    }

#define RadCake_end_step
     // Push Players:
	if(place_meeting(x, y, Player)) with(Player) if(place_meeting(x, y, other)){
		motion_add(point_direction(other.x, other.y, x, y), 1);
	}

	 // Push Enemies:
	if(place_meeting(x, y, enemy)) with(enemy) if(place_meeting(x, y, other)){
		motion_add(point_direction(other.x, other.y, x, y), size + 1);
	}

     // Stay Still:
    x = xprevious;
    y = yprevious
    speed = 0;

#define RadCake_hurt(_hitdmg, _hitvel, _hitdir)
    my_health -= _hitdmg;		    // Damage
    motion_add(_hitdir, _hitvel);   // Knockback
    nexthurt = current_frame + 6;   // I-Frames
    sound_play_hit(snd_hurt, 0.3);  // Sound

#define RadCake_draw
    if(nexthurt > current_frame + 3 || my_health <= 0){
        d3d_set_fog(1, c_white, 0, 0);
    }
    draw_self();
    d3d_set_fog(0, 0, 0, 0);

#define RadCake_destroy
    scrRadDrop(x, y, raddrop, direction, speed);
    instance_create(x, y, MeltSplat);
    instance_create(x, y, GroundFlame);
    sound_play(sndCorpseExplo);

#define CustomChest_step(_inst)
    if(instance_exists(_inst)) with(_inst){
         // Open Chest:
        var c = [Player, PortalShock];
        for(var i = 0; i < array_length(c); i++) if(place_meeting(x, y, c[i])){
            with(instance_nearest(x, y, c[i])) with(other){
                 // Call Chest Open Event:
                var e = on_open;
                if(mod_script_exists(e[0], e[1], e[2])){
                    mod_script_call(e[0], e[1], e[2], (i == 0));
                }

                 // Effects:
                with(instance_create(x, y, ChestOpen)) sprite_index = other.spr_open;
                instance_create(x, y, FXChestOpen);
                sound_play(snd_open);

                instance_destroy();
            }
            break;
        }
    }
    else instance_destroy();

#define IDPDWeaponChest_open(_player)
     // Nades:
    sound_play(sndGrenade);
    var _ang = (_player ? other.direction : random(360));
    for(var a = _ang; a < _ang + 360; a += (360 / 3)){
        with(instance_create(x, y, PopoNade)){
            motion_add(a + orandom(15), 2);
            alarm0 = 30;
            alarm2 = alarm0 - 20;
            team = 3;
            hitid = [sprPopoExplo, "IDPD Nade"];
        }
    }

     // Random Weapon:
    var w = 0,
        _mod = mod_get_names("weapon");

    do w = 1 + irandom(126 + array_length(_mod));
    until ((!_player || (w != other.wep && w != other.bwep)) && !weapon_get_gold(w));
    with(instance_create(x, y, WepPickup)){
        wep = ((w > 127) ? _mod[w - 127] : w);
        ammo = 1;
    }

#define IDPDHealthChest_open(_player)
    var s = skill_get(mut_second_stomach);

     // Turret:
    obj_create(x, y, "IDPDTurret");

     // Heal:
    if(_player) with(other){
        var h = 10 * (1 + s);
        my_health = min(my_health + h, maxhealth);
        instance_create(x, y, PopupText).text = ((my_health >= maxhealth) ? "MAX" : `+${h}`) + " HP";
    }
    else repeat(5) instance_create(x + orandom(6), y + orandom(6), HPPickup);

     // Effects:
    sound_play_pitch(sndRogueCanister, 0.5);
    sound_play_pitch(sndHealthChestBig, 0.5);
    instance_create(x, y, HealFX).sprite_index = sprHealGiantFX;
    if(s){
        sound_play_pitch(sndHPPickupBig, 0.5);
        for(var a = 90; a < 360 + 90; a += (360 / 3)){
            var o = 16;
            instance_create(x + lengthdir_x(o, a), y + lengthdir_y(o, a), HealFX).sprite_index = sprHealBigFX;
        }
    }

#define IDPDBigChest_open(_player)
     // Effects:
    sound_play(sndWeaponChest);
    sound_play(sndHealthChestBig);
    sound_play_pitch(sndRogueCanister, 1.5);
    sound_play_pitch(sndBigWeaponChest, 0.5);
    instance_create(x, y, HealFX).sprite_index = sprHealGiantFX;
    if(skill_get(mut_second_stomach)){
        sound_play_pitch(sndHPPickupBig, 0.5);
        for(var a = 90; a < 360 + 90; a += (360 / 3)){
            var o = 16;
            instance_create(x + lengthdir_x(o, a), y + lengthdir_y(o, a), HealFX).sprite_index = sprHealBigFX;
        }
    }

     // Clear Walls:
    with(instance_create(x, y, PortalClear)){
        image_xscale = 2;
        image_yscale = image_xscale;
    }

     // Ammo / HP:
    if(_player){
        with(other){
            sound_play(snd_chst);

             // Ammo:
            var s = weapon_get_type(wep),
                t = s;

            repeat(5){
                if(ammo[s] >= typ_amax[s]) t = irandom(4) + 1;
                ammo[t] = min(ammo[t] + typ_ammo[t], typ_amax[t]);
                instance_create(x, y, PopupText).text = ((ammo[t] >= typ_amax[t]) ? "MAX" : `+${typ_ammo[t]}`) + " " + typ_name[t];
            }

             // HP:
            var h = 10 * (1 + skill_get(mut_second_stomach));
            my_health = min(my_health + h, maxhealth);
            instance_create(x, y, PopupText).text = ((my_health >= maxhealth) ? "MAX" : `+${h}`) + " HP";
        }
    }
    else repeat(5){
        instance_create(x + orandom(12), y + orandom(6), AmmoPickup);
        instance_create(x + orandom(12), y + orandom(6), HPPickup);
    }

     // Weapons:
    var _ang = (_player ? other.direction + 180 : random(360));
    for(var a = _ang; a < _ang + 360; a += (360 / 3)){
        var w = 0,
            _mod = mod_get_names("weapon");

        do w = 1 + irandom(126 + array_length(_mod));
        until ((!_player || (w != other.wep && w != other.bwep)) && !weapon_get_gold(w));
        with(instance_create(x, y, WepPickup)){
            wep = ((w > 127) ? _mod[w - 127] : w);
            ammo = 1;

            motion_add(a, 1);
        }
    }

     // Mega Ambush:
    _ang += 180;
    for(var a = _ang; a < _ang + 360; a += (360 / 3)){ // Combine Tri-IDPDNade w/ Turret
        with(obj_create(x + lengthdir_x(64, a), y + lengthdir_y(64, a), "IDPDTurret")){
            instance_create(x, y, PortalClear);
        }
    }
    instance_create(x, y, VanSpawn); // 4 IDPD Spawns -> 1 Van Spawn

#define IDPDTurret_step
     // Hurt:
    if(current_frame_active){
        if(random(maxhealth) > my_health){
            instance_create(x + orandom(12), y + orandom(12), SmokeOLD);
            sound_play_pitchvol(sndLightningHit, 0.6 + random(0.2), 0.5);
        }
    }

     // Alarm1 : General
    if(scrAlarm(1)){
        alarm1 = ceil(sprite_get_number(spr_idle) / image_speed) + 1;

         // Shooting:
        if(ammo > 0){
            if(--ammo > 0) alarm1 = 4;

            image_index = 0;
            sprite_index = spr_fire;

             // Sound:
            sound_play(sndGruntFire);
            sound_play_pitch(sndPlasma, 1.5);
            sound_play_pitch(sndTurretFire, 1.6 + random(0.2));

             // Slug:
            with(instance_create(x + orandom(6), y + orandom(6), PopoSlug)){
                motion_add(other.gunangle + orandom(5), 14);
                image_angle = direction;
                team = other.team;
                creator = other;
                hitid = other.hitid;
                depth = other.depth + (0.1 * sin(degtorad(direction)));
            }
        }

        else{
            target = instance_nearest(x, y, (instance_exists(Player) ? Player : Bandit));

             // Begin Attack:
            if(
                instance_exists(target)                                 &&
                !collision_line(x, y, target.x, target.y, Wall, 0, 0)   &&
                point_distance(x, y, target.x, target.y) < 144
            ){
                gunangle = point_direction(x, y, target.x, target.y);
                alarm1 = 1;
                ammo = 12;
            }
    
             // No Attack:
            else sound_play_pitchvol(sndPlasmaReload, 1.4 + random(0.4), 30 / distance_to_object(Player));
        }
    }

     // Animate:
    if(sprite_index == spr_idle || (sprite_index != spr_idle && image_index + image_speed > image_number - 1)){
        sprite_index = spr_idle;
        image_index = image_number - (alarm1 * image_speed);
    }

#define IDPDTurret_draw
    var h = (nexthurt > current_frame + 3 && sprite_index != spr_hurt);
    if(h) d3d_set_fog(1, c_white, 0, 0);
    draw_self_enemy();
    if(h) d3d_set_fog(0, 0, 0, 0);

#define IDPDTurret_hurt(_hitdmg, _hitvel, _hitdir)
    my_health -= _hitdmg;		    // Damage
    motion_add(_hitdir, _hitvel);   // Knockback
    nexthurt = current_frame + 6;   // I-Frames
    sound_play_hit(snd_hurt, 0.3);  // Sound

     // Hurt Sprite:
    if(sprite_index != spr_spwn && sprite_index != spr_fire){
        sprite_index = spr_hurt;
        image_index = 0;
    }

#define IDPDTurret_end_step
    x = xprevious;
    y = yprevious;
    speed = 0;

#define IDPDTurret_death
     // Explosion:
    sound_play(sndIDPDNadeExplo);
    with(instance_create(x, y, PopoExplosion)){
        sprite_index = sprRogueExplosion;
        mask_index = mskExplosion;
        hitid = other.hitid;
    }
    repeat(irandom_range(1, 3)){
        instance_create(x + orandom(16), y + orandom(16), BlueFlame);
    }

     // Pickups:
    pickup_drop(33, 0);

#define IDPDTank_step
     // Spawn Anim Effects:
    if(sprite_index == spr_spwn){
        if(image_index < floor(image_index) + image_speed){
            switch(floor(image_index)){
                 // Extend Legs:
                case 5:
                    sound_play_pitchvol(sndSalamanderCharge, 0.5, 2);
                    break;

                 // Loosen Head:
                case 22:
                    sound_play_pitchvol(sndToxicBoltGas, 0.6, 0.5);
                    repeat(10) with(instance_create(x, y, Smoke)){
                        hspeed += random_range(1, 3) * choose(-1, 1);
                    }
                    break;

                 // Leg Activity Test:
                case 28:
                case 33:
                case 38:
                case 43:
                    view_shake_at(x, y, 5);
                    sound_play_pitchvol(sndSlugger, 0.6 + random(0.2), 0.6);
                    repeat(5) with(instance_create(x + orandom(16), y + random_range(16, 24), Dust)){
                        hspeed += orandom(3);
                    }
                    break;

                 // Begin OS:
                case 45:
                    sound_play_pitchvol(sndMutant8Valt, 1.3 + random(0.2), 0.8);
                    sprite_index = spr_chrg;
                    image_index = 0;
                    break;
            }
        }
    }

     // Walk:
    if(walk > 0){
        walk -= current_time_scale;
        motion_add(direction, addspeed);
    }
    if(speed > maxspeed) speed = maxspeed;

     // Animate:
    if(sprite_index != spr_spwn && sprite_index != spr_hurt && sprite_index != spr_chrg && sprite_index != spr_fire && sprite_index != spr_fend){
        if(speed <= 0){
            if(sprite_index != spr_idle){
                sprite_index = spr_idle;
                image_index = 0;
            }
        }
        else sprite_index = spr_walk;
    }
    else if(image_index + image_speed > image_number - 1){
         // End Fire Anim:
        if(sprite_index == spr_fire){
            if(!instance_exists(my_laser)){
                image_index = 0;
                sprite_index = spr_fend;
            }
        }

         // End Other Anims:
        else{
            image_index = 0;
            if(sprite_index == spr_chrg) sprite_index = spr_fire;
            else sprite_index = spr_idle;
        }
    }

    /// Claw Arm:
        var _clawTarg = instances_matching_lt(instances_matching_ne(hitme, "team", team), "size", 4),
            p = instances_matching_ge(Player, "size", 4);

        for(var i = 0; i < array_length(p); i++) _clawTarg[array_length(_clawTarg)] = p[i];

         // Sound:
        if(claw.extend){
            if(claw.door <= 0){
                sound_play_pitch(sndTurretSpawn, 1.25);
                sound_play_pitch(sndPlasmaReload, 1.2);
            }
        }
        else if(claw.scale >= 1){
            sound_play_pitch(sndRobotEat, 1.4);
            sound_play_pitch(sndPlasmaReload, 1.2);
        }

         // Open / Close Claw Compartment:
        var m = 0.1,
            n = claw.door;

        if(claw.extend){
            n *= 1.5;
            if(n < m) n = m;
        }
        else{
            if(claw.scale <= 0) n *= 0.75;
            if(n < m) n = 0;
        }
        claw.door = clamp(claw.door + ((n - claw.door) * current_time_scale), 0, 1);

         // Extend / Retract Arm:
        var m = 0.05,
            n = claw.scale;

        if(claw.extend){
            if(claw.door >= 1){
                n *= 1.25;
                if(n < m) n = m;
            }
        }
        else{
            n *= 0.75;
            if(n < m) n = 0;
        }
        claw.scale = clamp(claw.scale + ((n - claw.scale) * current_time_scale), 0, 1);

         // Move Arm:
        var c = 0.2 * current_time_scale,
            _cx = x + (28 * right),
            _cy = y + 8;

        if(!instance_exists(claw.grab)){ // Reach for meal
            var i = noone;
            if(distance_to_object(Player) < 48) i = instance_nearest(x, y, Player);
            else i = nearest_instance(x, y, _clawTarg);

            with(i) if(point_distance(x, y, other.x, other.y) < 80){
                _cx = x;
                _cy = y;
            }
        }
        else{ // Bring in to eat
            _cx = x + ((10 + (sprite_get_width(claw.grab.mask_index) / 2)) * right);
        }

        claw.targ_x += (_cx - claw.targ_x) * c;
        claw.targ_y += (_cy - claw.targ_y) * c;

         // Many Arm Vars:
        var _sx = x + (8 * right * image_xscale),
            _sy = y + (10 * image_yscale),
            _tx = claw.targ_x,
            _ty = claw.targ_y,
            _x = _sx,
            _y = _sy,
            _armLength = 0,
            _segments = array_length(claw.segment),
            _targetDis = point_distance(_sx, _sy, _tx, _ty);

        for(var i = 0; i < _segments; i++) _armLength += claw.segment[i].length;

         // Arm Extended:
        if(claw.scale < 1) claw.open = 0;
        if(claw.scale > 0){
             // Joint Arm Thing:
            for(var i = 0; i < _segments; i++){
                var _seg = claw.segment[i],
                    _ang = point_direction(_x, _y, _tx, _ty),
                    _scale = (1 - clamp((i + 1) - (claw.scale * _segments), 0, 1));

                _ang -= (30 / (i + 1)) * min(_armLength / _targetDis, 2) * cos(degtorad(_ang)); // it just works

                 // Save for Drawing:
                with(_seg){
                    draw_x = _x - other.x;
                    draw_y = _y - other.y;
                    angle = _ang;
                    scale = _scale;
                }

                 // Offset:
                var _off = (_seg.length - 1) * _scale;
                _x += lengthdir_x(_off, _ang);
                _y += lengthdir_y(_off, _ang);
            }

             // Grabbing Things:
            if(claw.open){
                claw.grab = noone;

                var e = nearest_instance(_x, _y, _clawTarg);
                with(e) if(mask_index != mskNone && mask_index != sprVoid && distance_to_point(_x, _y) < 5){
                    with(other){
                        sound_play_pitchvol(sndHitFlesh, 1.5 + random(0.5), 2);
                        claw.grab = e;
                        claw.open = 0;
                        eat_wait = ((other.object_index == Player) ? 30 : 15);
                    }
                }
            }
            else if(!instance_exists(claw.grab) && claw.scale >= 1){
                claw.open = 1;
            }
        }

         // Grabbed:
        if(!instance_is(claw.grab, hitme)) claw.grab = noone;
        if(eat_wait > 0) eat_wait -= current_time_scale;
        with(claw.grab){
             // Move Grabbed Enemy:
            if(place_meeting(_x, _y, Wall) || !place_meeting(_x, _y, Floor)){
                motion_add(point_direction(x, y, _x, _y), min(point_distance(x, y, _x, _y), 5));
            }
            else{
                if(!place_meeting(_x, y, Wall)){
                    x = _x;
                    xprevious = x;
                }
                if(!place_meeting(x, _y, Wall)){
                    y = _y;
                    yprevious = y;
                }
            }

             // Eat:
            if(other.eat_wait <= 0 && place_meeting(x, y, other) && nexthurt < current_frame){
                with(other){
                     // Nom nom nom
                    var h = min(20, other.my_health);
                    my_health = min(my_health + h, maxhealth);
                    projectile_hit(other, h, point_direction(x, y, other.x, other.y), 5);

                     // Useful Text:
                    with(instance_create(x, y, PopupText)){
                        text = (other.my_health >= other.maxhealth)
                            ? "MAX HP"
                            : `+${h} HP`;
                    }

                     // Release:
                    if(other.object_index == Player || my_health >= maxhealth){
                        claw.grab = noone;
                        claw.extend = 0;
                    }
                }

                /// Effects:
                    view_shake_at(x, y, 10);

                     // Blood:
                    if(!instance_is(self, prop)){
                        var b = (object_index == Guardian || object_index == ExploGuardian || object_index == DogGuardian || object_index == EnemyHorror || object_index == CrownGuardian)
                            ? AcidStreak
                            : BloodStreak;
        
                        repeat(size + 1){
                            with(instance_create(x, y, choose(b, AllyDamage))){
                                motion_add(other.direction + random_range(-20, 20), other.size);
                                image_angle = direction;
                            }
                        }
                        sound_play(sndCorpseExplo);
                    }

                     // Chomp FX:
                    var r = other.right;
                    with(instance_create(x, y, RobotEat)){
                        if(other.size > 1) sprite_index = sprRobotEatTB;
                        image_xscale = r;
                    }

                     // Sound:
                    sound_play_pitch(sndRobotEatUpg, 0.8);
                    if(random(2) < 1){
                        sound_play_pitch(sndMutant8Chst, 0.5 + random(0.2));
                    }
            }
        }

        claw.draw_x = _x - x;
        claw.draw_y = _y - y;

     // Alarm1 : General
    if(scrAlarm(1)){
        alarm1 = 30 + random(30);

        var c = nearest_instance(x, y, _clawTarg);

         // Hungry Hippo Mode:
        if(claw.extend){
             // Targeting:
            if(distance_to_object(Player) < 32){
                target = instance_nearest(x, y, Player);
            }
            else if(!instance_exists(target) || collision_line(x, y, target.x, target.y, Wall, 0, 0)){
                target = c;
            }

             // Walk Towards Target:
            if(instance_exists(target) && distance_to_object(target) > 16){
                var _dir = direction + orandom(60);

                 // Walk Towards Meal:
                if(!collision_line(x, y, target.x, target.y, Wall, 0, 0)){
                    _dir = point_direction(x, y, target.x, target.y) + orandom(30);
                }

                scrWalk(30, _dir);
                alarm1 = walk;
            }

             // Retract Claw:
            if(
                eat_wait <= 0   &&
                claw.scale >= 1 &&
                (
                    (
                        instance_exists(claw.grab) &&
                        claw.grab.object_index != Player
                    )
                    ||
                    (
                        distance_to_object(target) > 48 &&
                        random(2) < 1
                    )
                )
            ){
                claw.extend = 0;
            }
        }

         // Normal Mode:
        else{
            target = instance_nearest(x, y, Player);

             // Extend Claw:
            if(
                !claw.extend                &&
                !instance_exists(claw.grab) &&
                (
                    distance_to_object(target) < 32
                    ||
                    (
                        distance_to_object(c) < 48 &&
                        random(maxhealth) > my_health
                    )
                )
            ){
                alarm1 = 1;
                claw.extend = 1;
            }

            else{
                 // Aggroed:
                if(instance_exists(target)){
                    var _targetDir = point_direction(x, y, target.x, target.y);

                     // Main Laser Attack:
                    if(
                        random(2) < 1
                        &&
                        (
                            !collision_line(x, y, target.x, target.y, Wall, 0, 0)
                            ||
                            random(2) < 1
                        )
                        &&
                        (
                            point_distance(x, y, target.x, target.y) < 240
                            ||
                            random(2) < 1
                        )
                    ){
                        alarm1 = 60;

                        sprite_index = spr_chrg;
                        image_index = 0;

                         // Sound:
                        sound_play_pitchvol(sndSniperTarget, 0.5 + random(0.2), 1.25);
                        if(random(3) < 1){
                            sound_play_pitch(sndMutant8Thrn, 0.6 + random(0.2));
                        }
    
                         // Laser:
                        gunangle = _targetDir;
                        my_laser = obj_create(x, y, "PopoLaser");
                        with(my_laser){
                            direction = other.gunangle;
                            image_angle = direction;
                            image_xscale = 0;
                            image_yscale = image_xscale;
    
                            hitid = other.hitid;
                            team = other.team;
                            creator = other;
    
                            rotspeed = 0.6 * choose(-1, 1);
                            snd_fire = sndUltraLaserUpg;
                            charge_add = 0.03;
                            scorch = 0;
                        }
                        scrRight(gunangle);
                    }
        
                     // Walk Towards Player:
                    else{
                        scrWalk(40 + random(20), _targetDir + orandom(30));
                        if(random(4) < 1){
                            sound_play_pitch(sndMutant8LowH, 0.7 + random(0.2));
                        }
                    }
                }
    
                 // Random Movement:
                else scrWalk(40 + random(20), random(360));
            }
        }
    }

     // Hold Laser:
    with(my_laser){
        xstart = other.x + (other.image_xscale * other.right * 10);
        ystart = other.y + (other.image_yscale * 5);
        if(!active){
            x = xstart;
            y = ystart;
        }
    }

#define IDPDTank_draw
    var h = (nexthurt > current_frame + 3);
    if(h && sprite_index != spr_hurt) d3d_set_fog(1, c_white, 0, 0);

    draw_self_enemy();

     // Claw:
    if(h) d3d_set_fog(1, c_white, 0, 0);


    if(claw.door > 0){
        var s = (sprite_index == spr_walk ? global.sprClawWalk : global.sprClawIdle);
        draw_sprite_ext(s, image_index, x, y + (9 * image_yscale), image_xscale * right, image_yscale * claw.door, image_angle, image_blend, image_alpha);
    }
    if(claw.scale > 0){
        var _segments = array_length(claw.segment);
        for(var i = 0; i < _segments; i++){
            var _seg = claw.segment[i];
            draw_sprite_ext(global.sprArm, i, x + _seg.draw_x, y + _seg.draw_y, _seg.scale, right, _seg.angle, image_blend, image_alpha);
    
            if(i >= (_segments - 1)){
                draw_sprite_ext(global.sprClaw, claw.open, x + claw.draw_x, y + claw.draw_y, 1, right, _seg.angle, image_blend, image_alpha);
            }
        }
    }

    if(h) d3d_set_fog(0, 0, 0, 0);

#define IDPDTank_hurt(_hitdmg, _hitvel, _hitdir)
    my_health -= _hitdmg;		    // Damage
    motion_add(_hitdir, _hitvel);   // Knockback
    nexthurt = current_frame + 6;   // I-Frames

     // Sound:
    sound_play_hit(snd_hurt, 0.3);
    sound_play_hit(sndComputerBreak, 0.3);

     // Hurt Sprite:
    if(sprite_index != spr_spwn && sprite_index != spr_chrg && sprite_index != spr_fire && sprite_index != spr_fend){
        sprite_index = spr_hurt;
        image_index = 0;
    }

#define IDPDTank_death
     // Cool Death:
    with(obj_create(x, y, "IDPDTankExplode")){
        direction = other.direction;
        spr_dead = other.spr_dead;
        image_xscale = other.right;
        hitid = other.hitid;
        size = other.size;
        creator = other;
    }

     // Pickups:
    repeat(3) pickup_drop(66, 0);

#define IDPDTankExplode_step
    if(scrAlarm(0)){
         // Small Explo:
        if(explo > 0){
            var _dis = 24,
                _dir = direction + 180 + (explo * 120);

            with(instance_create(x + lengthdir_x(_dis, _dir) + orandom(8), y + lengthdir_y(_dis, _dir) + orandom(8), PopoExplosion)){
                sprite_index = sprRogueExplosion;
                mask_index = mskExplosion;
                hitid = other.hitid;
                creator = other.creator;
            }

             // Effects:
            view_shake_at(x, y, 10);
            sound_play(sndExplosionS);

            alarm0 = ((--explo <= 0) ? 10 : 5);
        }

         // Big Explo:
        else{
            with(instance_create(x, y, PopoExplosion)){
                hitid = other.hitid;
                creator = other.creator;
            }

             // Corpse:
            with(instance_create(x, y, Corpse)){
        		size = other.size;
        		sprite_index = other.spr_dead;
        		mask_index = other.mask_index;
        		image_xscale = other.image_xscale;
        	}
        
             // Effects:
            view_shake_at(x, y, 20);
            sound_play(sndExplosionS);
            sound_play(sndIDPDNadeExplo);
            repeat(5) with(instance_create(x + orandom(24), y + orandom(24), BlueFlame)){
                sprite_index = choose(sprBlueFlame, sprBlueFlameBig);
            }

            instance_destroy();
        }
    }

#define PyroIDPD_step
     // Movement:
    if(walk > 0){
        walk -= current_time_scale;
        motion_add(direction, addspeed);
    }
    if(speed > maxspeed) speed = maxspeed;

     // Animate:
    if(sprite_index != spr_hurt){
        if(speed <= 0) sprite_index = spr_idle;
        else sprite_index = spr_walk;
    }
    else if(image_index > 2) sprite_index = spr_idle;

     // Freeze:
    with(Player){
        if(speed > 0 || other.my_health < other.maxhealth) other.freeze++;
        if(!can_shoot) other.freeze += 3;
    }

     // Alarm1 : General
    if(scrAlarm(1)){
        alarm1 = 20 + random(20);

        var f = noone;

        target = instance_nearest(x, y, Player);
        if(instance_exists(target)){
            var _targetDir = point_direction(x, y, target.x, target.y);

             // Coward Mode:
            if(!collision_line(x, y, target.x, target.y, Wall, 0, 0) && point_distance(x, y, target.x, target.y) < 160){
                 // Run Away:
                scrWalk(10 + random(5), _targetDir + 180 + orandom(5));
                alarm1 = walk;

                 // Scorched earth motherfucker:
                if(freeze > 40) f = target;
            }

             // Corpse Mode:
            else if(freeze > 80 && grenades > 0 && random(3) < 1){
                var c = nearest_instance(x, y, instances_matching_ne(instances_matching(instances_matching_lt(Corpse, "size", 3), "image_speed", 0), "sprite_index", mskNone));

                 // Deploy Corpse Bot:
                if(instance_exists(c) && !collision_line(x, y, c.x, c.y, Wall, 0, 0)){
                    alarm1 = 60 + random(30);
                    grenades--;

                     // Back Away:
                    scrWalk(15, point_direction(c.x, c.y, x, y));
                    gunangle = direction + 180;
                    scrRight(gunangle);

                     // Deploy Bot:
                    sound_play_pitch(snd_nade, 0.75);
                    with(obj_create(x, y, "PyroBot")){
                        motion_add(other.gunangle, 5);
                        hitid = other.hitid;
                        team = other.team;
                        creator = other;
                        target = c;
                    }
                }

                 // Make More Corpses:
                else{
                    var e = nearest_instance(x, y, instances_matching_ne(enemy, "team", team, 0));
                    if(instance_exists(e) && !collision_line(x, y, e.x, e.y, Wall, 0, 0) && e.object_index != Player){
                        scrWalk(random(20), point_direction(e.x, e.y, x, y) + orandom(20));
                        f = e;
                    }
                }
            }

             // Random Movement:
            else scrWalk(20, random(360));
        }

         // Random Movement:
        else{
            scrWalk(20, random(360));
            alarm1 += walk;
        }

         // Flamethrower:
        if(instance_exists(f)){
             // Sound:
            sound_play_pitchvol(sndFiretrap, 1.5 + orandom(0.1), 2);
            if(alarm2 <= 0) sound_play(sndDragonStart);

             // Flames:
            ammo = 15;
            alarm2 = 1;
            alarm1 = ammo;

             // Aim:
            gunangle = point_direction(x, y, f.x, f.y) + ((ammo / 2) * sweep);
            scrRight(point_direction(x, y, f.x, f.y));
            sweep *= -1;
        }
    }

     // Alarm2 : Flamethrower
    if(scrAlarm(2)){
        if(ammo-- > 0){
            alarm2 = 1;

            gunangle += sweep;

            var o = 10;
            for(var a = -o; a <= o; a += o){
                var l = 16;
                with(instance_create(x + lengthdir_x(l, gunangle), y + lengthdir_y(l, gunangle), TrapFire)){
                    sprite_index = sprFireLilHunter;
    
    				motion_add(other.gunangle + a, 1 + random(2));
    				image_angle = random(360);
    
                    hitid = other.hitid;
                    team = other.team;
                    creator = other;
                }
            }
        }
    }

#define PyroIDPD_draw
    if(gunangle >  180) draw_self_enemy();
    draw_weapon(gunspr, x, y, gunangle, 0, wkick, right, image_blend, image_alpha);
    if(gunangle <= 180) draw_self_enemy();

#define PyroIDPD_hurt(_hitdmg, _hitvel, _hitdir)
    my_health -= _hitdmg;		    // Damage
    motion_add(_hitdir, _hitvel);   // Knockback
    nexthurt = current_frame + 6;   // I-Frames

     // Sound:
    var s = min(50 / (distance_to_object(Player) + 1), 1);
    sound_play_pitchvol(snd_hurt, 0.75 + orandom(0.1), s);

     // Hurt Sprite:
    sprite_index = spr_hurt;
    image_index = 0;

#define PyroIDPD_death
     // Sound:
    var s = (250 / (distance_to_object(Player) + 1));
    sound_play_pitchvol(snd_dead, 0.75 + orandom(0.1), s);
    sound_play_pitch(sndFlareExplode, 0.6 + random(0.1));
    sound_play_pitch(sndExplosionS, 0.6 + random(0.1));
    snd_dead = -1;

     // Flames:
    repeat(5) with(instance_create(x, y, TrapFire)){
        sprite_index = sprFireLilHunter;
		motion_add(other.direction, 2);
		motion_add(random(360), 1);
        hitid = other.hitid;
        team = other.team;
        creator = other;
    }
    repeat(10) with(instance_create(x, y, Smoke)){
		motion_add(other.direction + orandom(30), random(5));
    }

     // Pickups:
    pickup_drop(20, 0);

     // Officer Down:
    with(instances_matching([Grunt, Inspector, Shielder, EliteGrunt, EliteInspector, EliteShielder], "", null)) freeze += 100;
    with(instances_named(object_index, name)) freeze += 100;

#define PyroBot_step
     // Movement:
    if(walk > 0){
        walk -= current_time_scale;
        motion_add(direction, addspeed);
    }
    if(speed > maxspeed && sprite_index != spr_spwn){
        speed = maxspeed;
    }

     // Animate:
    if(sprite_index != spr_fire && sprite_index != spr_blnk){
        if(sprite_index != spr_chrg){
            if(sprite_index != spr_spwn){
                if(speed <= 0) sprite_index = spr_idle;
                else sprite_index = spr_walk;
            }
            else{
                if(speed > 0) image_index = 0;
                if(image_index + image_speed > image_number){
                    sound_play_pitchvol(sndMutant8LowH, 1.4 + random(0.2), 0.4);
                    sprite_index = spr_idle;
                }
            }
        }
        else if(image_index + image_speed > image_number) sprite_index = spr_fire;
    }
    if(image_alpha > 0) image_alpha *= -1;

     // Not Stuck:
    if(stick == noone){
         // Stick to Corpse:
        if(speed <= 0){
            if(instance_exists(target) && place_meeting(x, y, target) && target.image_speed == 0){
                stick = target;
                stick_x = x - stick.x;
                stick_y = y - stick.y;
                alarm0 = 30;
                alarm1 = -1;
                speed = 0;

                 // Effects:
                sound_play(sndGrenadeStickWall);
                image_angle = point_direction(x, y, stick.x, stick.y) + 90;
                sprite_index = spr_chrg;
                image_index = 0;
            }
        }

         // Bully the bot:
        if(place_meeting(x, y, projectile) && sprite_index != spr_spwn){
            with(instances_matching([Slash, GuitarSlash, BloodSlash, EnergySlash, EnergyHammerSlash, LightningSlash, CustomSlash], "", null)){
                if(place_meeting(x, y, other)) with(other){
                    motion_set(other.direction, 8);
                    
                     // Effects:
                    sprite_index = spr_spwn;
                    sound_play(sndGrenadeHitWall);
                    instance_create(x, y, Deflect).image_angle = direction;
                    view_shake_at(x, y, 3);
                    sleep(40);
                }
            }
        }
    }

     // Prime Corpse Detonation:
    else if(!instance_exists(stick) && alarm2 <= 0){
        alarm2 = 90;
        sprite_index = sprGrenadeBlink;
        sound_play_pitch(sndIDPDNadeLoad, 0.5);
        sound_play_pitch(sndUltraGrenadeSuck, 0.5);
    }

     // Alarm0 : Revive Corpse:
    if(scrAlarm(0)){
        var f = noone;
        with(stick){
             // Take Control of Corpse:
            f = obj_create(x, y, "PyroFreak");
            with(f){
                size = other.size;
                sprite_index = other.sprite_index;
                mask_index = other.mask_index;
                image_xscale = abs(other.image_xscale);
                image_yscale = abs(other.image_yscale);
                right = sign(other.image_xscale);
                spr_shadow = [shd16, shd24, shd32, shd48, shd64, shd96][clamp(size, 0, 6)];
            }

             // Stragglers:
            with(instances_matching(instances_named(other.object_index, other.name), "stick", id)){
                stick = f;
                alarm0 = -1;
            }

             // Effects:
            sound_play_pitch(sndNecromancerRevive, 2);
            with(instance_create(x, y + 8, ReviveFX)){
                sprite_index = sprPopoRevive;
                depth = -3;
            }

            instance_destroy();
        }
        with(f) hitid = other.hitid;
        stick = f;
    }

     // Alarm1 : Find Corpse
    if(scrAlarm(1)){
        if(sprite_index == spr_spwn) alarm1 = 30;
        else if(!place_meeting(x, y, target)){
            if(instance_exists(target) && !collision_line(x, y, target.x, target.y, Wall, 0, 0) && target.image_speed == 0){
                alarm1 = 10 + random(10);

                var _targetDir = point_direction(x, y, target.x, target.y);
                scrWalk(min(15, distance_to_object(target) + 5), _targetDir + orandom(10));
            }

             // Re-Target:
            else{
                alarm1 = 30;

                target = nearest_instance(x, y, instances_matching_ne(instances_matching(instances_matching_lt(Corpse, "size", 3), "image_speed", 0), "sprite_index", mskNone));
                scrWalk(10, random(360));
            }
        }
    }

     // Alarm2 : Corpse Bomb:
    if(alarm2 > 0){
         // Attract Corpses:
        with(instances_matching_ne(Corpse, "sprite_index", mskNone)){
            if(point_distance(x, y, other.x, other.y) < 64){
                if(array_find_index(other.corpses, id) < 0){
                    other.corpses[array_length(other.corpses)] = id;
                    break;
                }
            }
        }
        with(corpses) if(instance_exists(self)){
            image_speed = 0.4;

             // Suck in:
            if(other.stick != id){
                motion_add(point_direction(x, y, other.x, other.y), 3);
                image_index = max(image_index - (image_speed * 2), 0);
            }
        }

         // Effects:
        if(sprite_index != spr_blnk){
            sprite_index = spr_blnk;
            image_angle = 0;
        }
        if(current_frame_active){
            view_shake_at(x, y, min(ceil(array_length(corpses) / 3), 4));

            repeat(2) with(instance_create(x + orandom(48), y + orandom(48), IDPDPortalCharge)){
                motion_add(point_direction(x, y, other.x, other.y), 3 + random(1));
                alarm0 = (point_distance(x, y, other.x, other.y) / speed) + 1;
            }

            if(random(10) < 1){
                instance_create(x + orandom(16), y + orandom(16), Smoke);
            }
        }
    }
    if(scrAlarm(2)) instance_destroy();

#define PyroBot_end_step(_inst)
    if(instance_exists(_inst)) with(_inst){
         // Stuck to Thing:
        if(instance_exists(stick)){
            x = stick.x + stick_x;
            y = stick.y + stick_y;
            depth = stick.depth - 1;
            hspeed = stick.hspeed;
            vspeed = stick.vspeed;
    
             // Electrify:
            with(stick){
                if(image_speed == 0) image_speed = 0.4;
                if(current_frame_active && random(10) < 1){
                    image_index = max(image_index - 2, 0);
                    sound_play_pitchvol(sndLightningHit, 1, 0.5);
                    with(instance_create(x, y, PortalL)){
                        motion_add(random(360), 1.5);
                        depth = other.depth - irandom(1);
                    }
                }
            }
        }
    
         // Wall Collision:
        else if(place_meeting(x, y, Wall)){
            x = xprevious;
            y = yprevious;
            var f = friction;
            if(place_meeting(x + hspeed, y, Wall)) hspeed *= -1;
            if(place_meeting(x, y + vspeed, Wall)) vspeed *= -1;
            while(hspeed != 0 && place_meeting(x + hspeed, y, Wall)) hspeed -= clamp(hspeed, -f, f);
            while(vspeed != 0 && place_meeting(x, y + vspeed, Wall)) vspeed -= clamp(vspeed, -f, f);
        }
    }
    else instance_destroy();

#define PyroBot_draw
    image_alpha *= -1;
    draw_self_enemy();
    image_alpha *= -1;

#define PyroBot_destroy
    var c = 0;
    if(array_length(corpses) > 0){
         // Corpse Bomb:
        var _max = min(array_length(corpses), 10);
        for(var i = 0; i < _max; i++) with(corpses[i]){
            c++;
            var _dis = 16,
                _dir = other.direction + (360 * (i / (_max))),
                _x = other.x + lengthdir_x(_dis, _dir) + orandom(4),
                _y = other.y + lengthdir_y(_dis, _dir) + orandom(4);

            with(other) with(instance_create(_x, _y, PopoExplosion)){
                sprite_index = sprRogueExplosion;
                mask_index = mskExplosion;
                hitid = other.hitid;
                team = other.team;
                creator = other.creator;
            }

            with(instance_create(_x + orandom(16), _y + orandom(16), BlueFlame)){
                sprite_index = (other.size > 1)
                    ? sprBlueFlameBig
                    : sprBlueFlame;
            }
            instance_destroy();
        }

         // Push Away Excess:
        with(corpses) if(instance_exists(self)){
            c++;
            motion_add(point_direction(other.x, other.y, x, y), (skill_get(mut_impact_wrists) ? 16 : 10));
        }
    }

     // Effects:
    if(c > 0){
        view_shake_at(x, y, c);
        sound_play(sndIDPDNadeExplo);
        sound_play((c <= 4) ? sndExplosionS : sndExplosionL);
    }
    else{
        sound_play_pitch(sndFrogGasReleaseButt, 1.25 + random(0.5));
        repeat(10) with(instance_create(x, y, Smoke)){
            motion_add(random(360), 4);
        }
    }

     // No Softlock:
    with(instance_create(x, y, Corpse)) sprite_index = mskNone;

#define PyroFreak_step
     // Movement:
    if(walk > 0){
        walk -= current_time_scale;
        motion_add(direction, addspeed);
    }
    if(speed > maxspeed) speed = maxspeed;

     // Animate:
    if(image_index >= 3) image_index = 1;

     // Death Explo:
    if(alarm11 > 0 || scrAlarm(0)) my_health = 0;

     // Alarm1 : General
    if(scrAlarm(1)){
        alarm1 = 20;

         // Aggro:
        target = instance_nearest(x, y, Player);
        if(instance_exists(target)){
            scrWalk(alarm1, point_direction(x, y, target.x, target.y) + orandom(40));
        }

         // Random Movement:
        else scrWalk(random(10), random(360));
    }

     // Burning:
    if(current_frame_active && random(4) < 1){
        with(instance_create(x, y, Smoke)){
            hspeed += other.hspeed / 2;
            vspeed += other.vspeed / 2;
        }
    }

#define PyroFreak_draw
    var h = (nexthurt > (current_frame + 3));
    if(h) d3d_set_fog(1, c_white, 0, 0);
    draw_self_enemy();
    if(h) d3d_set_fog(0, 0, 0, 0);

#define PyroFreak_hurt(_hitdmg, _hitvel, _hitdir)
    my_health -= _hitdmg;		    // Damage
    motion_add(_hitdir, _hitvel);   // Knockback
    nexthurt = current_frame + 6;   // I-Frames
    sound_play_hit(snd_hurt, 0.3);  // Sound

#define PyroFreak_death
    spr_dead = sprite_index;

     // Death FX:
    repeat(10){
        with(instance_create(x, y, Smoke)) motion_add(random(360), 1);
        with(instance_create(x, y, Dust)) motion_add(random(360), 5);
    }
    repeat(10){
        with(instance_create(x, y, PortalL)){
            motion_add(random(360), random(2));
            hspeed += other.hspeed / 2;
            vspeed += other.vspeed / 2;
        }
    }

#define VenuzCar_create(_x, _y, _elite)
    sound_play_pitchvol(sndCarLoop, 1, 2);
    with(instance_create(_x, _y, CustomHitme)){
        name = "VenuzCar";

        elite = !!_elite;

        motion_add(instance_dir(x, y, Player), 8);
        image_angle = direction;

         // Visual:
        spr_idle = global.sprVenuzCarIdle[elite];
        spr_chrg = global.sprVenuzCarOpen[elite];
    	spr_hurt = global.sprVenuzCarHurt[elite];
    	spr_shadow = -1;
    	depth = -1;
    	hitid = [spr_idle, "VENUZ CAR"];

         // Sound:
    	snd_hurt = sndHitMetal;
    	snd_dead = sndExplosionCar;
    	snd_mele = sndMoneyPileBreak;

         // Vars:
    	mask_index = mskScorpion;
    	maxhealth = (elite ? 100 : 50);
    	my_health = maxhealth;
    	meleedamage = 4;
    	raddrop = (elite ? 40 : 20);
    	canfly = 1;
    	team = 0;
    	size = 3;
    	right = choose(-1, 1);
    	maxspeed = 6;
    	trnspeed = 0;
    	friction = 0.2;
    	brake = 0;
    	brake_friction = 1.3;
    	drive = 1;
    	open = 0;
    	index = -1;
    	index_mask = mskNone;

         // Enemy Cargo:
        var i = 0;
    	repeat(2) boys[i++] = (elite ? Molesarge : Molefish);
        if(random(4) < 3){
            if(random(2) < 1) boys[i++] = Jock;
            else boys[i++] = (elite ? SuperFireBaller : FireBaller);
        }
        else repeat(2) boys[i++] = Molesarge;

    	alarm0 = 40;

    	on_step     = VenuzCar_step;
    	on_hurt     = VenuzCar_hurt;
    	on_draw     = VenuzCar_draw;
    	on_destroy  = VenuzCar_destroy;

        return id;
    }

#define VenuzCar_step
     // Animate:
    if(sprite_index != spr_hurt || sprite_index == spr_hurt && image_index >= 2){
        sprite_index = (open ? spr_chrg : spr_idle);
    }

     // Alarm0 : Stop Driving, Release Squad
    if(scrAlarm(0)){
         // Brake:
        if(drive > 0){
            drive = 0;
            alarm0 = 30;
        }

         // Open:
        else if(!open){
            open = 1;
            instance_create(x, y, PortalClear);

             // Release Squad:
            for(var i = 0; i < array_length(boys); i++){
                with(instance_create(x, y, boys[i])){
                    motion_add(other.image_angle + choose(-90, 90) + orandom(20), 16);

                     // Effects:
                    sound_play_pitch(snd_dead, 0.5);
                    repeat(5) with(instance_create(x, y, Feather)){
                        sprite_index = sprMoney;
                        motion_add(other.direction, 2);
                    }
                }
            }
        }
    }

     // Turning:
    if(!brake){
        trnspeed += (angle_difference(direction, image_angle) / 2.5) * (speed / maxspeed);
    }
    if(trnspeed != 0){
        image_angle += trnspeed * current_time_scale;
        while(image_angle < 0) image_angle += 360;
        while(image_angle >= 360) image_angle -= 360;

         // Decrement trnspeed:
        var t = (trnspeed * 0.5 * (speed / maxspeed));
        trnspeed += (t - trnspeed) * current_time_scale;
    }
    if(drive > 0 || index != -1){
        direction += (angle_difference(image_angle, direction) / (speed + 1)) * current_time_scale;
    }
    scrRight(image_angle);

     // Driving:
    if(drive > 0){
        brake = 0;

         // Movement:
        speed++;
        if(alarm0 > 0) trnspeed += angle_difference(instance_dir(x, y, Player), direction) / speed;

         // Effects:
        sound_play_pitchvol(asset_get_index(`sndFootSlime${1 + irandom(5)}`), 0.5, 0.5);
        var o = choose(Feather, CaveSparkle);
        with(instance_create(x + orandom(16), y + orandom(16), o)){
            if(o == Feather) sprite_index = sprMoney;
        }
    }

     // Stopping:
    else{
         // Parked:
        if(brake) speed -= min(speed, brake_friction * current_time_scale);

         // Drift to a Stop:
        else{
            if(speed > 1){
                 // Drift to Stop:
                if(index == -1) trnspeed = angle_difference(90 - (right * 90), image_angle) / (2 + speed);

                 // Player Driving, More Slippery:
                else speed += (friction / 2) * current_time_scale;

                 // Effects:
                if(current_frame_active){
                    view_shake_at(x, y, 3);
                    if(random(2) < 1) sound_play_pitchvol(sndVenuz, 0.5 + random(1), 0.5);
                    with(instance_create(x + orandom(16), y + orandom(16), Smoke)){
                        hspeed = other.hspeed;
                        vspeed = other.vspeed;
                    }
                }
            }

             // Brakes On:
            else if(speed <= 0 && open){
                brake = 1;
            }
        }
    }

     // Open:
    if(open){
        var e = 0;

         // Player Enter Car:
        if(index == -1){
            if(place_meeting(x, y, Player)) with(Player){
                if(button_pressed(index, "pick") && visible && place_meeting(x, y, other)){
                    with(other) if(index == -1){
                        index = other.index;
                        open = 0;
                        e = 2;
                    }
                }
            }
        }

         // Player Exited Car:
        else{
            index = -1;
            index_mask = mskNone;
            drive = 0;
            e = 3;
        }

         // Effects:
        if(e){
            sound_play_pitch(sndBigBanditMeleeHit, e);
            repeat(5) with(instance_create(x, y, Dust)){
                motion_add(other.image_angle + choose(-90, 90), 4);
            }
        }
    }

     // Player Driving:
    if(index != -1){
        var _player = player_find(index);
        if(instance_exists(_player)){
             // Grab Pickups:
            if(place_meeting(x, y, Pickup)) with(Pickup){
                if(place_meeting(x, y, other)) with(_player){
                    with(other) event_perform(ev_collision, Player);
                }
            }

             // Lock Player:
            alarm11 = 30;
            with(_player){
                x = other.x;
                y = other.y;
                visible = 0;
                if(mask_index != mskNone){
                    other.index_mask = mask_index;
                    mask_index = mskNone;
                }
            }

             // Driving:
            drive = button_check(index, "nort");
            trnspeed += 10 * (button_check(index, "west") - button_check(index, "east"));

             // Honk:
            if(button_pressed(index, "horn")){
                sound_play_pitchvol(sndVenuz, 0.6 + random(0.2), 0.8);
                view_shake_at(x, y, 8);
            }
        }
        else open = 1;
    }

     // Max Speed (duh):
    var m = maxspeed * ((alarm0 > 0 && place_meeting(x, y, Tangle)) ? 0.3 : 1);
    if(speed > m) speed = m;

     // Wall Collision:
    if(place_meeting(x + hspeed, y + vspeed, Wall)){
         // Break Walls:
        if(!brake){
            with(Wall) if(place_meeting(x - other.hspeed, y - other.vspeed, other)){
                instance_create(x, y, FloorExplo);
                instance_destroy();
            }
            if(nexthurt < current_frame){
                projectile_hit_raw(id, 1, snd_hurt)
            }
        }

         // Wall Collide:
        else{
            var f = friction;
            while(hspeed != 0 && place_meeting(x + hspeed, y, Wall)) hspeed /= 2;
            while(vspeed != 0 && place_meeting(x, y + vspeed, Wall)) vspeed /= 2;
        }
    }

     // Run em over:
    if(place_meeting(x, y, hitme)) with(hitme) if(place_meeting(x, y, other)){
         // Push:
        motion_add(point_direction(other.x, other.y, x, y), 1);

         // Bash:
        with(other) if(!brake && speed > 0){
            var m = 1;
            if(other.object_index == Player){
                if(alarm11 <= 0) alarm11 = 30;
                else m = 0;
            }
            if(m){
                projectile_hit(other, meleedamage, (speed / 4), direction);
                sound_play(snd_mele);

                 // Dead-o:
                with(other) if(my_health <= 0){
                    sound_play_pitchvol(sndBigBanditMeleeHit, 1.25, 0.25 + (size * 0.25));
                }
            }
        }
    }

     // Hurt:
    if(current_frame_active && random(maxhealth / 2) > my_health){
         // Smoking:
        instance_create(x + orandom(12), y + orandom(12), Smoke);

         // Burning:
        if(my_health <= 15){
            with(instance_create(x + orandom(12), y + orandom(12), BulletHit)){
                sprite_index = choose(sprGroundFlameDisappear, sprGroundFlameBigDisappear);
                vspeed = -1;
                motion_add(random(360), 1);
                depth = other.depth + choose(0, -1);
            }
        }
    }

     // Die:
    if(my_health <= 0) instance_destroy();

#define VenuzCar_hurt(_hitdmg, _hitvel, _hitdir)
    nexthurt = current_frame + 6;           // I-Frames
    sound_play_hit(snd_hurt, 0.3);          // Sound
    if(brake) motion_add(_hitdir, _hitvel); // Knockback

     // Hurt Sprite:
    sprite_index = spr_hurt;
    image_index = 0;

     // Fix:
    var _canHit = 1;
    with(other) if((object_index == Shank && canfix) || object_index == EnergyShank){
        _canHit = 0;
        with(other){
            if(my_health < maxhealth){
                my_health = maxhealth;
                sound_play(sndGoldChest);
            }

             // Effects:
            repeat(3) with(instance_create(x + orandom(12), y + orandom(12), CaveSparkle)){
                depth = other.depth - 1;
            }
            if(other.object_index == EnergyShank){
                sound_play(sndCarLoop); // Energize Radio
            }
        }
    }

     // Damage:
    if(_canHit) my_health -= _hitdmg;

#define VenuzCar_draw
    var h = (my_health <= 15 && (current_frame mod (my_health + 2)) < 1);
    if(h){
        d3d_set_fog(1, c_white, 0, 0);
        sound_play_pitchvol(sndBurn, random_range(1, 1.1), 0.25);
    }
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale * right, image_angle, image_blend, image_alpha);
    if(h) d3d_set_fog(0, 0, 0, 0);
    
#define VenuzCar_destroy
    sound_stop(sndCarLoop);
    sound_play(snd_dead);
    if(elite) sound_play(sndExplosion);

     // Explode:
    var e = (1 + elite);
    repeat(5 * e){
        with(instance_create(x + orandom(3), y + orandom(3), Explosion)) hitid = other.hitid;
        instance_create(x + orandom(12 * e), y + orandom(12 * e), GroundFlame);
    }
    repeat(3 * e) with(instance_create(x + orandom(3), y + orandom(3), SmallExplosion)) hitid = other.hitid;
    view_shake_at(x, y, 15);

     // Rads:
    while(raddrop > 0){
        with(instance_create(x, y, Rad)){
            sprite_index = global.sprMoneyRad;
            motion_add(other.direction, other.speed / 2);
            motion_add(random(360), 2 + (other.raddrop / 10));
        }
        raddrop--;
    }

     // Squad:
    if(!open && alarm0 > 0){
        for(var i = 0; i < array_length(boys); i++){
            with(instance_create(x, y, boys[i])){
                motion_add(other.direction + orandom(45), 16);
                team = other.team;
            }
        }
    }

     // Release Driver:
    with(player_find(index)){
        visible = 1;
        mask_index = other.index_mask;
        motion_add(other.direction, other.speed);
    }

#define PlayerAlly_create(_x, _y, _elite)
    with(instance_create(_x, _y, CustomHitme)){
        name = "PlayerAlly";

        motion_add(random(360), 4);
        scrRight(direction);

         // Vars:
        race_id = 1 + irandom(11);
        race = race_get_name(race_id);
        maxhealth = (_elite ? 12 : 8);
        my_health = maxhealth;
        raddrop = max(ceil(GameCont.rad / 10), 10);
        size = 4;
        team = 2;
        walk = 0;
        maxspeed = (_elite ? 4.5 : 4);
        addspeed = 1;
        friction = 0.4;
        gunangle = direction;
        wepangle = 0;
        endgame = 100;
        target = noone;
        wkick = 0;
        curse = 0;

        path = -1;
        path_x = x;
        path_y = y;
        path_w = 4000;
        path_h = 4000;
        path_l = 0;
        path_t = 0;
        path_max = 100;
        path_make = 0;
        path_target = noone;

         // Wep:
        if(_elite) wep = irandom(127);
        else switch(race){
            case "venuz":   wep = wep_golden_revolver;  break;
            case "chicken": wep = wep_chicken_sword;    break;
            case "rogue":   wep = wep_rogue_rifle;      break;
            default:        wep = wep_revolver;
        }

         // Visual:
        var _name = "Mutant" + string(race_id),
            b = (_elite ? "B" : "");

        spr_idle = asset_get_index("spr" + _name + b + "Idle");
        spr_walk = asset_get_index("spr" + _name + b + "Walk");
        spr_hurt = asset_get_index("spr" + _name + b + "Hurt");
        spr_dead = asset_get_index("spr" + _name + b + "Dead");
        spr_sit1 = asset_get_index("spr" + _name + b + "GoSit");
        spr_sit2 = asset_get_index("spr" + _name + b + "Sit");
        spr_shadow = shd24;
        hitid = [spr_idle, race];
        my_mask = mskAlly;
        mask_index = my_mask;
        image_speed = 0.4;
        depth = -2;

         // Sound:
        snd_hurt = asset_get_index("snd" + _name + "Hurt");
        snd_dead = asset_get_index("snd" + _name + "Dead");
        snd_lowa = asset_get_index("snd" + _name + "LowA");
        sound_play(asset_get_index("snd" + _name + "Wrld"));

        alarm1 = 10 + random(10);

        on_step     = PlayerAlly_step;
        on_end_step = PlayerAlly_end_step;
        on_hurt     = PlayerAlly_hurt;
        on_draw     = PlayerAlly_draw;
        on_destroy  = PlayerAlly_destroy;

        return id;
    }

#define PlayerAlly_step
     // Going Through Portals:
    if(instance_exists(GenCont)){
        persistent = 0;
        my_health = maxhealth;
    }
    if(!visible){
        walk = 0;
        alarm1 = 30;
        alarm2 = -1;
        mask_index = mskNone;
        my_health = maxhealth;
        if(!instance_exists(GenCont) && !persistent){
            visible = 1;
            alarm1 = 40 + random(20);
            x = 10016 + orandom(16);
            y = 10016 + orandom(16);
            mask_index = my_mask;
        }
    }

     // Movement:
    if(walk > 0){
        walk -= current_time_scale;
        motion_add(direction, addspeed);
    }
    if(speed > maxspeed) speed = maxspeed;

     // Animate:
    if(sprite_index != spr_hurt){
        if(speed <= 0) sprite_index = spr_idle;
        else sprite_index = spr_walk;
    }
    else if(image_index > 2) sprite_index = spr_idle;

     // Alarm1 : General
    if(scrAlarm(1)){
        alarm1 = 10 + random(5);

         // Target:
        if(!instance_exists(target) || collision_line(x, y, target.x, target.y, Wall, 0, 0)){
            target = instance_nearest(x, y, enemy);
        }

        if(instance_exists(target)){
            var _targetDir = point_direction(x, y, target.x, target.y);

             // Aggro:
            if(!collision_line(x, y, target.x, target.y, Wall, 0, 0) || random(40) < 1){
                var _targetDis = point_distance(x, y, target.x, target.y),
                    _dis = ((weapon_is_melee(wep) || wep == wep_jackhammer)
                                ? 60
                                : (weapon_get_type(wep) == 2)
                                    ? 100
                                    : 160);

                if(_targetDis < _dis || random(weapon_get_type(wep)) < 1){
                     // Begin Shoot-age:
                    if(alarm2 <= 0 && random(5) < 4){
                        alarm2 = 1;
                        if(random(3) < 1) sound_play(snd_lowa);
                    }

                     // Don't shoot, walk away instead:
                    else if(random(3) < 2){
                        scrWalk(10 + random(10), _targetDir + 180 + orandom(90));
                        alarm1 = 5 + random(5);
                        gunangle = _targetDir;
                    }
                }

                 // Too Far Away:
                if(_targetDis > _dis) scrWalk(5 + random(10), _targetDir + orandom(60));
            }

             // Try to Reach Target:
            else if(path_target != target){
                path_make = true;
                path_target = target;
            }
        }

         // Passive:
        else{
             // Follow Player:
            if(!instance_exists(Portal)){
                var n = instance_nearest(x, y, Player);
                if(instance_exists(n)){
                     // Pathfind Around Walls:
                    if(collision_line(x, y, n.x, n.y, Wall, 0, 0)){
                        if(path_target != n){
                            path_make = true;
                            path_target = n;
                        }
                    }
    
                     // Found Player:
                    else if(point_distance(x, y, n.x, n.y) > 32 || random(10) < 1){
                        scrWalk(10, point_direction(x, y, n.x, n.y) + orandom(10));
                    }
                }
            }

             // Find Portal:
            else{
                var p = instance_nearest(x, y, Portal);
                if(collision_line(x, y, p.x, p.y, Wall, 0, 0) && path_target != p){
                    path_make = true;
                    path_target = p;
                }
            }

             // Random Movement:
            if(random(2) < 1){
                motion_add(random(360), 2);
            }
        }

        scrRight(gunangle);
    }

     // Alarm2 : Shooting
    wkick -= clamp(wkick, -1, 1) * current_time_scale;
    if(scrAlarm(2)){
        var _targetVisible = (instance_exists(target) && !collision_line(x, y, target.x, target.y, Wall, 0, 0));

         // Pew Pew:
        if(_targetVisible || random(max(weapon_get_load(wep), 4)) < 3){
            if(_targetVisible) gunangle = point_direction(x, y, target.x, target.y);
            player_fire_ext(gunangle, wep, x, y, team, id);
            wkick = (weapon_is_melee(wep) ? -5 : 4);
            alarm2 = max(weapon_get_load(wep), 1);
            wepangle = -wepangle;
            scrRight(gunangle);
        }

         // Done Shooting:
        else{
            scrWalk(random(20), random(360));
            alarm1 = 1 + random(5);
        }
    }

    if(visible){
         // Pathfinding:
        var _size = 16;
        if(instance_exists(path_target) && collision_line(x, y, path_target.x, path_target.y, Wall, 0, 0)){
            if(path == -1) path = ds_grid_create(ceil(path_w / _size), ceil(path_h / _size));
            if(path_make && global.path_queue > 0){
                path_make = false;
                global.path_queue--;
    
                path_x = path_target.x;
                path_y = path_target.y;
                path_l = round_ext(path_x - (path_w / 2), _size);
                path_t = round_ext(path_y - (path_h / 2), _size);
    
                var _path = path,
                    _pathX = path_x,
                    _pathY = path_y,
                    _pathLeft = path_l,
                    _pathTop = path_t;
    
                 // Clear Path:
                ds_grid_clear(_path, -1); // -1 / Unsearched
                with(instances_matching_le(instances_matching_ge(instances_matching_le(instances_matching_ge(Wall, "x", _pathLeft), "x", _pathLeft + path_w), "y", _pathTop), "y", _pathTop + path_h)){
                    _path[# ((x - _pathLeft) / _size), ((y - _pathTop) / _size)] = -2; // -2 / Don't Search (Walled)
                }
    
                 // Create Path:
                var _search = [[floor((_pathX - _pathLeft) / _size), floor((_pathY - _pathTop) / _size)]],
                    _goal = [floor((x - _pathLeft) / _size), floor((y - _pathTop) / _size)],
                    _max = path_max,
                    s = 0;
    
                while(s < array_length(_search) && s < _max){
                    var _pos = _search[s++];
    
                     // Sort Through Neighbouring Tiles:
                    for(var i = 0; i < 2*pi; i += pi/2){
                        var _next = [
                                    _pos[0] + cos(i),
                                    _pos[1] - sin(i)
                                    ];
    
                        if(path[# _next[0], _next[1]] == -1){
                            array_push(_search, _next);
                            path[# _next[0], _next[1]] = point_direction(_next[0], _next[1], _pos[0], _pos[1]);
                        }
                    }
    
                     // Target Found:
                    if(_pos[0] == _goal[0] && _pos[1] == _goal[1]) break;
                }
            }

             // Follow Path:
            if(walk <= 0){
                if(!collision_line(path_x, path_y, path_target.x, path_target.y, Wall, 0, 0)){
                    var _dir = path[# ((x - path_l) / _size), ((y - path_t) / _size)];
                    if(_dir >= 0){
                        path_max = 100;
                        scrWalk(3, _dir + orandom(10));
                    }
        
                     // Re-Path:
                    else{
                        path_max += 100;
                        path_make = true;
                    }
                }
                else path_make = true;
            }
        }

         // Push:
        if(place_meeting(x, y, hitme)) with(hitme){
            if(place_meeting(x, y, other)) with(other){
                var _dir = point_direction(other.x, other.y, x, y);
                if(size <= other.size || instance_is(other, prop)){
                    motion_add(_dir, other.size * 0.25);
                }
                else with(other) motion_add(_dir + 180, 1);
            }
        }

         // Get Weapon:
        if(instance_exists(WepPickup)){
            with(instance_nearest(x, y, WepPickup)) if(visible && (!other.curse || curse) && !weapon_get_gold(wep)){
                if(!collision_line(x, y, other.x, other.y, Wall, 0, 0)){
                    var a = weapon_get_area(wep);
                    if(
                        (
                            weapon_get_gold(other.wep)
                            &&
                            a > 4
                        )
                        ||
                        a > weapon_get_area(other.wep)
                    ){
                        with(other){
                             // Move Towards:
                            if(walk <= 0) scrWalk(10, point_direction(x, y, other.x, other.y) + orandom(5));
                
                             // Swap Out:
                            if(place_meeting(x, y, other)){
                                with(instance_create(x, y, WepPickup)){
                                    wep = other.wep;
                                    curse = other.curse;
                                }
                                wep = other.wep;
                                curse = other.curse;
                                with(other) instance_destroy();
                
                                 // Effects:
                                sound_play(weapon_get_swap(wep));
                                instance_create(x + lengthdir_x(10, gunangle), y + lengthdir_y(10, gunangle), WepSwap);
                            }
                        }
                    }
                }
            }
        }

         // Wepangle:
        if(weapon_is_melee(wep)){
            if(wepangle == 0) wepangle = choose(-120, 120);
        }
        else wepangle = 0;

         // Cursed:
        if(curse){
            var o = 10,
                a = gunangle;

            instance_create(x + lengthdir_x(o, a) + orandom(3), y + lengthdir_y(o, a) + orandom(3), Curse);
        }

         // Enter Portal:
        if(instance_exists(Portal)){
            var p = instance_nearest(x, y, Portal),
                _dir = point_direction(x, y, p.x, p.y);

            if(!collision_line(x, y, p.x, p.y, Wall, 0, 0)){
                 // Run to Portal:
                if(point_distance(x, y, p.x, p.y) > 96){
                    if(walk <= 0) scrWalk(10, _dir);
                }
    
                 // Portal Pull:
                else{
                    var _pull = 5,
                        _x = x + lengthdir_x(_pull, _dir),
                        _y = y + lengthdir_y(_pull, _dir);
    
                    if(!place_meeting(_x, y, Wall)) x = _x;
                    if(!place_meeting(x, _y, Wall)) y = _y;
    
                    image_angle -= 30 * right;
                    sprite_index = spr_hurt;
                    image_index = 1;
                    mask_index = mskNone;
                    depth = -9;
                    speed = 0;
                }
            }

             // Portal Ingests Player:
            if(distance_to_object(p) <= 0){
                endgame -= current_time_scale;
                if(endgame <= 0 || Portal.endgame <= 0){
                    visible = 0;
                    persistent = 1;
                    image_angle = 0;
                    depth = -2;
                    endgame = 100;
                }
            }
        }
    }

     // Death:
    if(my_health <= 0) instance_destroy();

#define PlayerAlly_end_step
     // Wall Collision:
    if(visible && place_meeting(x, y, Wall)){
        if(random(5) < 1){
            scrWalk(5 + random(5), point_direction(x, y, xprevious, yprevious) + orandom(45));
        }

        x = xprevious;
        y = yprevious;
        var f = friction;
        if(place_meeting(x + hspeed, y, Wall)) hspeed *= -1;
        if(place_meeting(x, y + vspeed, Wall)) vspeed *= -1;
        while(hspeed != 0 && place_meeting(x + hspeed, y, Wall)) hspeed -= clamp(hspeed, -f, f);
        while(vspeed != 0 && place_meeting(x, y + vspeed, Wall)) vspeed -= clamp(vspeed, -f, f);
    }

#define PlayerAlly_hurt(_hitdmg, _hitvel, _hitdir)
    if(!instance_is(other, Corpse) && !instance_is(other, Debris)){
        my_health -= _hitdmg;			// Damage
        motion_add(_hitdir, _hitvel);	// Knockback
        nexthurt = current_frame + 6;	// I-Frames
        sound_play_hit(snd_hurt, 0.3);	// Sound
    
         // Hurt Sprite:
        sprite_index = spr_hurt;
        image_index = 0;
    }

#define PlayerAlly_draw
    if(gunangle >  180) draw_self_enemy();
    draw_weapon(weapon_get_sprt(wep), x, y, gunangle, wepangle, wkick, right, image_blend, image_alpha);
    if(gunangle <= 180) draw_self_enemy();

#define PlayerAlly_destroy
    sound_play(snd_dead);
    scrCorpse(direction, speed);
    scrRadDrop(x, y, raddrop, direction, speed);
    with(instance_create(x, y, WepPickup)){
        wep = other.wep;
        curse = other.curse;
    }

#define draw
	draw_set_font(fntM);
	draw_set_halign(fa_center);
	draw_set_valign(fa_top);
    draw_set_visible_all(1);

     /// Tooltips:
    with(instances_named(CustomHitme, "RadCake")){
        if(place_meeting(x, y, Player)){
        	draw_sprite(sprEPickup, 0, x, y - 7);
        	draw_text_nt(x, y - 31, "EAT");
        }
    }
    with(instances_named(CustomHitme, "VenuzCar")){
        if(open && place_meeting(x, y, Player)){
        	draw_sprite(sprEPickup, 0, x, y - 7);
        	draw_text_nt(x, y - 31, "DRIVE");
        }
    }

#define draw_bloom
    with(instances_named(CustomProjectile, "PopoLaser")){
        var _alpha = (active ? (sqr(image_yscale + 1) / 10) : 0.1),
            _scale = 2;

        image_yscale *= _scale;
        image_alpha *= _alpha;
        event_perform(ev_draw, 0);
        image_yscale /= _scale;
        image_alpha /= _alpha;
    }

    with(instances_named(CustomProjectile, "GiantBanditBullet")){
        draw_sprite_ext(sprite_index, image_index, x, y, 2 * image_xscale, 2 * image_yscale, image_angle, image_blend, image_alpha * 0.1);
    }

    with(instances_named(CustomEnemy, "IDPDTurret")){
        if(sprite_index != spr_hurt){
            var a = 0.15;
            if(sprite_index == spr_hurt) a = 0.2 * (image_index / image_number);
            draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * 1.2, image_yscale * 1.2, image_angle, image_blend, image_alpha * a);
        }
    }

    with(instances_named(CustomEnemy, "PyroFreak")){
        draw_sprite_ext(sprite_index, image_index, x, y, right * image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha * random(0.2));
    }

    with(instances_named(CustomProjectile, "PyroNade")){
        with(corpses) if(instance_exists(self)){
            draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * 2, image_yscale * 2, image_angle, image_blend, image_alpha * 0.1);
        }
    }

#define draw_shadows
    with(instances_named(CustomObject, "IDPDTankExplode")){
        draw_sprite(spr_shadow, 0, x + spr_shadow_x, y + spr_shadow_y);
    }

    with(instances_named(CustomObject, "PyroBot")){
        if(sprite_index != spr_chrg && sprite_index != spr_fire && sprite_index != spr_blnk){
            draw_sprite(spr_shadow, 0, x + spr_shadow_x, y + spr_shadow_y);
        }
    }

#define draw_dark
    with(instances_named(CustomEnemy, "IDPDTurret")){
        draw_circle(x, y, 70 + random(2), 0);
    }
    with(instances_named(CustomHitme, "RadCake")){
        draw_circle(x, y, 100 + random(4), 0);
    }
    with(instances_named(CustomHitme, "PlayerAlly")){
        draw_circle(x, y, 90 + random(3), 0);
    }
    with(instances_named(CustomProjectile, "GiantBanditBullet")){
        draw_circle(x, y, (20 * image_xscale) + random(4), 0)
    }

#define draw_dark_end
    with(instances_named(CustomEnemy, "IDPDTurret")){
        var r = 30 + random(2);
        if(sprite_index == spr_fire) r += random(ammo);
        draw_circle(x, y, r, 0);
    }
    with(instances_named(CustomHitme, "RadCake")){
        draw_circle(x, y, 50 + random(4), 0);
    }
    with(instances_named(CustomHitme, "PlayerAlly")){
        draw_circle(x, y, 30 + random(3), 0);
    }
    with(instances_named(CustomProjectile, "GiantBanditBullet")){
        draw_circle(x, y, (10 * image_xscale) + random(4), 0)
    }

#define instances_named(_inst, _name)
    return instances_matching(_inst, "name", _name);

#define scrAlarm(_alarm)
    var a = alarm_get(_alarm);
    if(a > 0){
        a -= max(1, current_time_scale);
        alarm_set(_alarm, a);
        if(a <= 0){
            alarm_set(_alarm, -1);
            return true;
        }
    }
    return false;

#define instance_dir(_x, _y, _obj)
    var n = instance_nearest(_x, _y, _obj);
    if(instance_exists(n)) return point_direction(_x, _y, n.x, n.y);
    return random(360);

#define orandom(_range)
    return random_range(-_range, _range);

#define instance_random(_obj)
	if(instance_exists(_obj)){
		var i = instances_matching(_obj, "", undefined);
		return i[irandom(array_length(i) - 1)];
	}
	return noone;

#define nearest_instance(_x, _y, _instances)
	var	_nearest = noone,
		d = 1000000;

	with(_instances){
		var _dis = point_distance(_x, _y, x, y);
		if(_dis < d){
			_nearest = id;
			d = _dis;
		}
	}

	return _nearest;

#define scrRight(_direction)
    var d = (_direction mod 360);
    if(d < 90 || d > 270) right = 1;
    if(d > 90 && d < 270) right = -1;

#define scrWalk(_walk, _dir)
    walk = _walk;
    speed = max(speed, friction);
    direction = _dir;
    if("gunangle" in self) gunangle = direction;
    scrRight(direction);

#define draw_self_enemy()
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale * right, image_yscale, image_angle, image_blend, image_alpha);

#define draw_weapon(_sprite, _x, _y, _ang, _meleeAng, _wkick, _flip, _blend, _alpha)
	draw_sprite_ext(_sprite, 0, _x - lengthdir_x(_wkick, _ang), _y - lengthdir_y(_wkick, _ang), 1, _flip, _ang + (_meleeAng * (1 - (_wkick / 20))), _blend, _alpha);

#define scrCorpse(_dir, _spd)
	with(instance_create(x, y, Corpse)){
		size = other.size;
		sprite_index = other.spr_dead;
		mask_index = other.mask_index;
		image_xscale = other.right * other.image_xscale;

		 // Speedify:
		direction = _dir;
		speed = min(_spd + max(0, -other.my_health / 5), 16);
		if(size > 0) speed /= size;

        return id;
	}

#define scrRadDrop(_x, _y, _raddrop, _dir, _spd)
	while(_raddrop > 0){
		var r = (_raddrop > 15);
		repeat(r ? 1 : _raddrop){
			if(r) _raddrop -= 10;
			with(instance_create(_x, _y, (r ? BigRad : Rad))){
				speed = _spd;
				direction = _dir;
				motion_add(random(360), random(_raddrop / 2) + 2);
				speed *= power(0.9, speed);
			}
		}
		if(!r) break;
	}

#define round_ext(_num, _round)
    return round(_num / _round) * _round;

#define floor_ext(_num, _round)
    return floor(_num / _round) * _round;

#define determine_cool
    return "hey what up yeah i'm cool"

#define cleanup
    with(instances_named(CustomHitme, "PlayerAlly")) path = -1;
